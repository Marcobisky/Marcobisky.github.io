---
title: "C 语言编译"
---

- **IR (Intermediate Representation)**: 中间代码的作用: 相当于有一个中间缓冲, 可以看成编译器的前端, 通过增加这一个模块, 可以让编译器的前端和后端解耦, 方便支持多种语言和多种目标架构.

```
             frontend                              backend
           +----------+                        +------------+
      C -> |  Clang   | -+                 +-> |  llvm-x86  | -> x86
           +----------+  |                 |   +------------+
           +----------+  +-> +----------+ -+   +------------+
Fortran -> | llvm-gcc | ---> | llvm-opt | ---> |  llvm-arm  | -> ARM
           +----------+  +-> +----------+ -+   +------------+
           +----------+  |                 |   +------------+
Haskell -> |    GHC   | -+                 +-> | llvm-riscv | -> RISC-V
           +----------+  LLVM IR      LLRM IR  +------------+
```


- gcc 编译选项:
    - `-E`: 只预处理, 不编译.
    - `-S`: 生成汇编代码 (`.s` 文件)
    - `-c`: 只编译, 不链接. (生成 `.o` 文件)
    - `-o <file>`: 指定输出文件名.
    - `-g`: 在输出的文件中加入支持调试的信息.
    - `-v` (verbose): 显示编译过程中的详细信息.


:::{.column-margin}    
![编译过程](compilation.png)
:::
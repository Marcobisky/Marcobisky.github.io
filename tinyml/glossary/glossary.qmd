---
title: "Glossary 名词解释"
---

> Glossary is important and irrelevant at the same time.

> **NOTE**: 以下概念是我学习过程中遇到并且你需要掌握的, 其它文章中我将不会对以下名词进行解释.


## General Terms

- **CFU**: Custom Function Unit (自定义功能单元). 为 ML 某些耗时的计算 (如卷积、矩阵乘法、位操作等) 定制的指令加速硬件模块.
    - 一旦主处理器执行到特定的 CFU 指令，就会将数据发送给 CFU 处理，然后 CFU 返回结果.
    - **FPU**: Floating Point Unit (浮点运算单元), 是 CPU 中专门处理浮点数运算的硬件组件.

- **Git LFS**: Git Large File Storage. 解决了 github 不能上传大文件的问题. 使用:

    ```bash
    sudo apt-get install git-lfs
    git lfs install # 在项目目录中初始化 Git LFS
    git lfs pull # 下载实际文件
    ```

    然后原来的文件的格式就会从文本格式变为真正的 ZIP 文件, 可以通过下面的命令查看:

    ```bash
    file test.zip # 返回 
    ```

## FPGA Terms

### General

- **TfLM**: TensorFlow Lite for Microcontrollers. 
    - **PDTI8**: Person DeTection Int 8

- **Gateware**: 用软件编写的硬件电路. (既不是 Software, 也不是 Hardware).

- **HPS**: High Performance System. 
    - `PLATFORMS=common_soc sim hps`, 三个平台. `common_soc` 指标准的 FPGA 开发平台; `sim` 指用 Verilator 进行软件仿真.

- **SoC (System on Chip) FPGA 片上系统**: 比如 ZYNQ, **一块硅芯片** 就可以实现整个系统的功能 (而不是要组合多个芯片). 

- **ACAP (Adaptive Compute Acceleration Platform)**: 集成了专用 AI 引擎／DSP阵列、Network-on-chip (NoC)、高带宽存储接口 (如 HBM) 等异构硬件资源 @sali2025realtimefpgabased, 如 Xilinx Versal 系列.

- **IP Core**: Intellectual Property Core. 由一方 (开发者或公司) 设计，并通过许可授权给其他设计者使用。常见的 IP 核包括 CPU 内核、以太网控制器、内存控制器等.
    - **Soft IP**: 软核
    - **Hard IP**: 硬核


- **`.vcd`, `fst`**: 波形文件格式, 后者占空间更小, 但只受 GTKWave 支持 @Simulation_Time._Putting_2025_oscc.

### Interface

- **PMOD (Peripheral Module) 接口**: 一组 2*6 排针的引脚 PMOD. 定义了电源、地线、以及最多 8 条可用于通信的信号线. PMOD模块通常通过 SPI、I2C 或 GPIO (通用数字输入输出) 与主控通信. 你可以买到很多支持 PMOD 的模块, 如传感器、显示屏、存储器等.

- **JTAG 接口**: 一种用于调试和编程的标准接口.

- **AXI (Advanced eXtensible Interface) 接口**: CPU 与外设 (内存控制器, DMA, CFU, IP 核) 之间的通信协议. 
    - 比如 ZYNQ 的 **PS (Processing System)** 和 **PL (Programmable Logic)** 之间的通信就是通过 AXI 接口 (见 [FPGA 原理速成](../cc-fpga/cc-fpga.qmd#sec-ps-structure)).

### File formats

- **`.pcf` 文件**: Physical Constraints File. `.pcf` 文件告诉工具：Verilog 中的某个逻辑信号，物理上应该接到 FPGA 的哪个 pin. 比如:

    ```pcf
    set_io D1 B5
    ```

    表示把 `D1` (在 `.v` 文件中定义的) 信号连接到 FPGA 的 B5 引脚.

    - **`.xdc` 文件**: Xilinx Design Constraints File (Vivado 工具使用的约束文件, a.k.a., Master Constraints File 主约束文件). [Arty 35T xdc 文件](https://raw.githubusercontent.com/Digilent/digilent-xdc/master/Arty-A7-35-Master.xdc)

### HDL

- **HLS**: High-Level Synthesis. 用 C/C++ 等高级语言来写硬件电路设计.

    - **Scala (Scalable language)**: 一种专门生成其它 DSL (Domain Specific Language) 的语言. 生成的语言包括:
        - **SpinalHDL**: 一种 Hardware Description Language (HDL). 可用来生成更底层的 Verilog 代码. 
            - **[VexRiscv Soft CPU](https://github.com/SpinalHDL/VexRiscv)**: 用 SpinalHDL 写的一个 高度可配置的 RISC-V soft CPU 内核 (soft 的意思就是 CPU 不是硬件焊死的 ("hard CPU") , 而是部署在 FPGA 上可以改变结构的).
        - **Chisel**: 另一种 HDL. 
        - **Scalac**: Scala 编译器.
        - **sbt**: Scala Build导出 Tool. 配置依赖、插件和调用 scalac. 会在指定目录下面生成 `.v` 或 `.sv` 文件.
            - **.fir**: FIRRTL (Flexible Intermediate Representation for RTL) 文件, 一种用于硬件设计的中间表示 (加上 `--dump-fir` 选项即可, `dump` 一般表示「导出」).
        - **Mill**: 跟 sbt 类似, 但更轻量.
        

    - **Amaranth**: 一个 Python 库, 也是用于硬件描述和设计. 可生成 Verilog 代码.


- **RTL**: Register Transfer Level. 通俗说就是 verilog 代码的抽象程度水平.

    ![](design-level.png){width=80%}



### FPGA Principles

- **PAR**： Place and Route. 布局布线. 


### FPGA Structure 结构

- **BLE, CLB (Slice, LAB, ALM), SB**: 见 [FPGA 原理速成](../cc-fpga/cc-fpga.qmd#sec-pl-structure).

- **LUT (Look-Up Table)**: 查找表. 所有写 `Verilog` 的行为一般都会被综合成 LUT + FF 的结构.

- **DSP (Digital Signal Processing) Block**: FPGA 上专门进行数值运算 (乘加) 的硬件模块 (是卷积、矩阵乘法核心).
    - **LUT-based DSP**: 与 DSP Block 有本质的区别, 综合器会把它看成 LUT + FF 结构, 而不是调用板子上的 DSP Block 硬件资源.

## Submodules 项目中用到的核心子模块

> 该项目重度使用了以下开源项目, FPGA 开源是一个很大的工程, 感谢所有开源者!

- [**verilator**](https://github.com/verilator/verilator): 将 verilog 代码变成 C++ 代码, 然后编译并运行在 CPU 上进行**仿真**, 模拟出时钟、寄存器逻辑、外设交互等行为.

    ```bash
    verilator -cc blink.v # 生成 obj_dir/ 其中含有转换好的 C++ 代码
    ```

- [**iverilog (Icarus Verilog)**](https://github.com/steveicarus/iverilog): 也是仿真 (但不输出 C 代码):

    ```bash
    iverilog -o blink.vvp blink.v blink_tb.v
    # 生成 vcd 文件可配合 GTKWave 查看波形
    vvp blink.vvp
    ```

- [**openFPGALoader**](https://github.com/trabucayre/openFPGALoader): 用于将比特流烧录到 FPGA (但不能调试).

    ```bash
    # 示例：
    openFPGALoader -b arty arty_bitstream.bit      # SRAM 加载
    openFPGALoader -b arty -f arty_bitstream.bit   # 写入 flash
    ```

- [**openocd**](https://github.com/openocd-org/openocd): Open On-Chip Debugger. 用于调试 FPGA 的工具. 支持 JTAG 接口.

- 三个端到端的工具链:

    - **Vivado**: IDE, 闭源.

    - [**yosysHQ (Yosys Open SYnthesis Suite Headquarters)**](https://github.com/YosysHQ): yyds!! 一个开源的 EDA 工具链. 子项目包括:
        - [**icestorm**](https://github.com/YosysHQ/icestorm): 用于针对 Lattice iCE40 FPGA 实现完全的端到端开源流程, 从 Verilog 到 bitstream, 再烧写到 FPGA 板卡上. 以下每一个命令都是一个单独的 repo!!

            ```bash
            # yosys 综合 (将 verilog 转换为网表 .json)
            yosys -p 'synth_ice40 -top blink -json blink.json' blink.v
            # nextpnr 布局布线 (生成 bitstream 的中间文件 .asc)
            nextpnr-ice40 --up5k --json blink.json --pcf blink.pcf --asc blink.asc
            # icepack 打包 (生成 bitstream .bin)
            icepack blink.asc blink.bin
            # icesprog 烧写 (将 bitstream 写入 FPGA)
            sudo icesprog blink.bin
            ```

    - [**F4PGA**](https://github.com/chipsalliance/f4pga): 以前叫 `Symbiflow`, 旨在为多家 FPGA 供应商 (Xilinx 7 系列、Lattice iCE40/ECP5、QuickLogic EOS S3 等) 提供统一、功能完备、可扩展且无需专有软件的端到端开发流程.
        - 里面大量使用了 `YosysHQ` 的工具.

- [**SpinalHDL**](https://github.com/SpinalHDL): 一个基于 Scala 的硬件描述语言 (HDL), 用于生成 Verilog 代码. SpinalHDL 提供了更高级的抽象和更强大的功能, 使得硬件设计更加灵活和可扩展.
    - [**VexRiscv**](https://github.com/SpinalHDL/VexRiscv): 

- [**Litex**](https://github.com/enjoy-digital/litex): 支持用 Python 脚本拼装出完整的 SoC.



## ML Terms

- **MSE (Mean Squared Error)**: 可用作 Loss function.

- **AUC (Area Under Curve)**: 二分类模型的性能评估指标, 越大越好.

- **F-score**: 二分类 (正类、负类) 模型的性能评估指标.
    - **TP (True Positive)**: 正类被正确分类为正类.
    - **FP (False Positive)**: 负类被错误分类为正类.
    - **FN (False Negative)**: 正类被错误分类为负类.
    - **Recall 召回率**: $TP/TP+FP$
    - **Precision 精确率**: $TP/TP+FN$
    - **F1-score**: Recall 和 Precision 的调和平均 (F-$\beta$ score 的特例)
    - **F-$\beta$ score**: 仅仅是给 recall 加了权重.

        ![](F-score.png)

- **Hyperparameter 超参数**: 模型训练前需要设置的参数, 如学习率、batch size、层数, etc.

- **A/B Test**: 类似双盲实验, 比如研究修改按钮颜色能否提升点击率? 新模型是否真的比旧模型好? 可以用这种方法进行对比实验.


- **Tensorflow, JAX, PyTorch**: 机器学习框架. 其实就是一些 Python 库.

    ```python
    import tensorflow as tf
    import torch
    import jax.numpy as jnp
    ```

    - RISCV 上有 TfLM (TensorFlow Lite for Microcontrollers), 
    - **ONNX (Open Neural Network Exchange)**: 一种统一的描述神经网络结构的格式, 以上三种框架都支持导出为 ONNX 格式.

- **TVM, XLA (Accelerated Linear Algebra)**: 机器学习编译器, 在以上三个框架内都有 python 的接口函数.

- **AI 幻觉**: AI 编造事实的现象.

- **FP32**: 32 位浮点数, 1 位符号位, 8 位指数位, 23 位尾数位, 精度高, 计算速度慢.
- **BF16**: Brain Floating Point 16, 1 位符号位, 8 位指数位, 7 位尾数位, 精度低, 计算速度快.

- **DAG (Directed Acyclic Graph)**: 有向无环图, 用来可视化一次计算过程 (哪些数据先算, 后面的数据依赖哪些数据).

- **tiled 分块**: 

### Computing in ML

- **FLOP (Floating-Point OPeration)**: 一次浮点运算包括一次加/减/乘/除.
    - **FLOPs (Floating-point Operations)** 
    - **FLOPS (Floating-point Operations Per Second)**: 

- **MAC (Multiply‑ACcumulate)**: $a \leftarrow a + (b \times c)$ 这种运算, 神经网络中有大量的 MAC 运算. 1 MAC = 2 FLOPs.
    - `torchprofile` 库可以统计模型中的 FLOPs 和 MACs.

## CPU Terms

- **PSR (Program Status Register)**: 程序状态寄存器. 有 NZVC (Negative, Zero, Overflow, Carry) 四个标志位. 

- **Hart (Hardware Thread)**: 硬件线程, 指一个独立的处理器核心, 包括一套流水线, 寄存器, PC 等等 (今后将不提处理器核心这个概念, 只提 Hart).
- **Benchmark**: 基准测试. 用于测试系统或工具的功能/性能.

- **QEMU (Quick Emulator)**: 开源的模拟器, 可模拟多种 CPU 架构 (如 ARM, x86, RISCV 等).

- **Renode**: 开源的模拟器, 主要面向嵌入式系统.

- **Endianness**[^endian]: 

    ![大端与小端 @Lazyparser_2025_bilibili](endianness.png){width=80%}

[^endian]: 记忆: 小端是自然的, 因为大部分人喜欢洗小头 (

- **MMU (Memory Management Unit)**: 内存管理单元, 负责虚拟内存和物理内存之间的映射.
    - **TLB (Translation Lookaside Buffer)**: 很像 CPU 的 Cache, 用于加速虚拟地址到物理地址的转换. 也有 TLB miss, TLB hit, spacial locality, temporal locality, etc. 这些概念.

- **PPA (Power, Performance, Area)**: 三个重要的设计指标.

- **DSA (Domain Specific Architecture)**

## GPU Terms

- **Kernel**: 在 GPU 上运行的函数. 

## RISCV

- **ABI (Abstract Binary Interface)**: 抽象二进制接口. 比如寄存器的使用约定 (比如函数传参用 `a0~a7`), 数据类型大小 (char 占几个字节等), 函数调用约定, 内存对齐等.

- **Hart (Hardware Thread)**: 硬件线程, 指一个独立的处理器核心, 包括一套流水线, 寄存器, PC 等等 (今后将不提处理器核心这个概念, 只提 Hart).

- **PMP (Physical Memory Protection)**: 物理内存保护. 

## C Compile Terms

- **gcc (GNU Compiler Collection)**: GNU 编译器集合, 包括 C、C++、Go 等编程语言的编译器.
    - gcc = clang (前端) + LLVM (后端) (在功能上)

- **IR (Intermediate Representation)**: 编译器在编译过程中形成的中间代码 (不一定只有一层, 可以有多层), 用于编译器优化和代码生成.
    - **GIMPLE**: gcc 生成的中间表示
    - **LLVM IR**: clang 生成的中间表示

- **MLIR**: 机器学习模型训练的中间表示.

- **GDB (GNU Debugger)**: GNU 调试器. 支持 Assembly, C/C++, Go, Rust 等.

- **elf (Executable Linkable Format)**: 可执行链接格式. 包含 `.o`, `a.out`, `.so` 等文件.
    - **Binutils (Binary Utilities)**: elf 文件处理相关工具, 包括:
        - `objdump`: 反汇编工具.
        - `objcopy`: 执行文件格式转换. elf 中还包含了很多运行时不需要的信息, `objcopy` 可将这些信息去掉生成 `bin` 文件.
        - `readelf`: 显示更多 elf 格式文件的信息.
        - `ar`: tar, 将多个文件打包成一个大文件.

:::{.column-margin}
![ELF 文件格式 @Lazyparser_2025_bilibili](elf-format.png)
:::

- **Cross Compilation**: 交叉编译, 即在另一台机器上面开发手里面的这台机器 (嵌入式开发, 或在 MacOS 编写 RISCV 的操作系统).
    - 构建 (build) 系统: 生成可执行程序的计算机.
    - 主机 (host) 系统: 运行可执行程序的计算机.
    - 目标 (target) 系统: 可执行程序运行的计算机架构

:::{.column-margin}
![交叉编译](cross-compilation.png)
:::

## Operating System Terms

- **RTOS (Real-Time Operating System)**: 实时操作系统, 用于嵌入式系统.
    - **FreeRTOS**: 设计小巧, 核心代码只有 3 到 4 个 C 文件, 支持 ARM, x86, RISCV @Lazyparser_2025_bilibili.
    - **RT-Thread**: 也是一个 RTOS

## YSYX Terms

- **AM (Abstraction Machine)**: 抽象机, 用程序模拟的硬件计算机.

- **NPC (New Processor Core)**: 指我们自己设计的处理器.

## AnalogGYM Terms

- **FOM (Figure of Merit)**: 性能指标.

- **PVT (Process, Voltage, Temperature)**: 影响电路性能的三个主要因素.
    - **Process**: 工艺, e.g.,
        - TT (Typical-Typical): 典型工艺角, NMOS 和 PMOS 都是典型速度设计的目标工艺角
        - FF (Fast-Fast): 快-快工艺角, NMOS 和 PMOS 都比典型值快, 功耗通常较高，速度快
        - SS (Slow-Slow): 慢-慢工艺角, NMOS 和 PMOS 都比典型值慢, 功耗较低，但速度慢
        - FS (Fast-Slow): 快-慢工艺角, NMOS 快，PMOS 慢, 不对称的工艺条件
        - SF (Slow-Fast): 慢-快工艺角, NMOS 慢，PMOS 快, 另一种不对称条件NMOS慢，PMOS快
    - **PVT corner**: PVT 角, 某种特定的工艺、电压和温度组合 (一般是比较极端的组合, 所以称为 "corner").
    
- **GAT (Graph Attention Network)**: 图注意力网络.

- **MTRL (Multi-task Reinforcement Learning)**: 多任务强化学习.

- **PDK (Process Development Kit)**: 工艺开发套件.
    - **NDA (Non-Disclosure Agreement)**: 商业 PDK 必须对模型文件、器件参数、仿真结果保密 (这是将 ML 应用于电路设计的最大瓶颈之一 @li_2023_design).
    - **SKY130**: 开源 PDK, 由 Google 和 SkyWater Technology 在 2020 年共同开发的 130nm 开源工艺平台.


## Integrated Circuit Terms

- **VLSI (Very Large Scale Integration)**: 超大规模集成电路.
- **RGCN (Relational Graph Convolutional Network)**: 关系图卷积网络.

## Integrated Circuit Terms

- **VLSI (Very Large Scale Integration)**: 超大规模集成电路.

## Optimization

- **TSP (Travelling Salesman Problem)**: 旅行商问题. 给定若干城市与它们之间的距离, 目标是找出一条路径, 使旅行者每个城市恰好访问一次, 最终回到起点, 并且总旅行距离最短.

- **CVRP (Capacitated Vehicle Routing Problem)**: 带容量限制的车辆路径问题. 多辆车运送货物给多个城市, 每辆车只能装有限重量的货物, 目标是货物全送到并让运送距离最短.

- **FFSP (Flexible Flow Shop Problem)**: 灵活流水车间调度问题.

    ![FFSP](ffsp.png)
[{"content":"Introduction and Overview Building a generic website from scratch is a tough work. However, personal websites for blogs, a special type of website, is actually programmatic. Hugo provides a convenient building templates for that. To make a new blog in Hugo, one could only just create a new folder, write a markdown file (in a specific format) and that\u0026rsquo;s it. You don\u0026rsquo;t need ANY knowledge about HTML or CSS. Well do you need to buy a domain name for everyone to see your posts? Well, GitHub Pages is a free service where you just push some contents in a repository of your own with some extremely easy command line, you created your sites of names like yourname.github.io.\nTools needed Homebrew (Packet Manager) We will use a packet manager called Homebrew to install Hugo. Follow the commands here to download Homebrew first.\nOnce downloaded, if you don\u0026rsquo;t get any error by entering this in the terminal in any folder, you installed it properly (Install testing):\n1 brew --version Git (Version Control System) You can use Homebrew to install Git:\n1 2 brew install git git --version # install testing Install Hugo Run this in any folder:\n1 brew install hugo Install testing:\n1 hugo version Run Example Theme Create Framework Enter the terminal in any folder, you will be creating another main folder called mysite in it. Folder mysite will contain all the contents that are relevant to your website:\n1 2 hugo new site mysite cd mysite Folder mysite should look like this:\nwith most folders in it empty. This is the framework.\nChoose Theme The themes folder is empty, now we will add some code representing a theme inside it. Now choose a template here and downlaod its source code folder inside the themes folder. I use Stack\n1 2 cd themes/ git clone https://github.com/CaiJimmy/hugo-theme-stack.git # Replace as needed Run Theme Now there should be a folder inside themes. Now copy all the things inside a folder like exampleSite into the main mysite folder (\u0026lsquo;\u0026lsquo;replace\u0026rsquo;\u0026rsquo;).\nGo to the main mysite folder and remove the original hugo.tomal file, or you can do:\n1 2 pwd # should be in \u0026#34;mysite\u0026#34; rm hugo.tomal Then (in mysite folder), run:\n1 hugo server -D it will prompt something like:\n1 2 3 4 5 6 Built in 865 ms Environment: \u0026#34;development\u0026#34; Serving pages from disk Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:53844/ (bind address 127.0.0.1) Press Ctrl+C to stop Enter the link provided (http://localhost:53844/). You are done!\nPlay Around This is easy, just compare the contents in each folder and the website and modify things a little.\nPublish your website Note the link (http://localhost:53844/) is private and cannot be visited on other devices. So follow these steps to publish it:\nCreate GitHub Repository Go to your GitHub page and click \u0026lsquo;+\u0026rsquo; on the right upper corner, choose New repository and name it like this:\ni.e., yourname.github.io, which will be your own domain name.\nPush Contents Run this:\n1 hugo --theme=hugo-theme-stack --baseURL=\u0026#34;https://yourname.github.io/\u0026#34; --buildDrafts Then push the contents in your folder public on it by:\n1 2 3 4 5 6 cd public git init git remote add origin https://github.com/yourname/yourname.github.io.git # change as needed git add . git commit -m \u0026#34;Initial commit\u0026#34; git push -u origin main You can access your website on https://yourname.github.io/ within several minutes.\nNotes After you change contents locally, the contents on https://yourname.github.io/ will not change automatically, you will have to push it on GitHub again:\n1 2 3 4 cd public git add . git commit -m \u0026#34;Add something new\u0026#34; git push origin main Also the public website will not update instantly, you will have to wait several minutes.\n","date":"2024-08-31T00:00:00Z","permalink":"http://localhost:1313/p/create-your-own-website-using-hugo-on-macos/","title":"Create your own website using Hugo on MacOS"},{"content":"Intro and Overview References CLAIM: 本文综合了多个网站的结论和方法，并非原创。\nYou may find these websites useful:\nWorkflow for FPGA development Some open-source tools IceStudio for M2 Mac Tools related You need these:\ngtkwave: main RTL wave creator Digital: Visual simulation YoSYS: .v to .json netlistsvg: .json to .svg Not nessasarily required:\nPulseview: Logic Analyzer (Not required though) Useful vscode plugins:\nVerilog Support: vscode verilog language highlighter Wavetrace: A nice vscode plugin to replace gtkwave First Project Install Icarus Verilog Compiler 1 brew install icarus-verilog 新建文件夹Verilog，在其中新建两个测试文件：GatedDLatch.v and GatedDLatch_tb.v，前者为电路结构描述文件，后者为testbench文件，写入以下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // in GatedDLatch.v module GatedDLatch (Data, WE, Out, OutBar); input Data; input WE; output Out; output OutBar; // component name(output, input1, input2) wire S; wire R; wire Dbar; nand g1(S, Data, WE); not g2(Dbar, Data); nand g3(R, WE, Dbar); nand g4(Out, S, OutBar); nand g5(OutBar, R, Out); endmodule and\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // in GatedDLatch_tb.v `timescale 1ns / 1ns // simulation time, time precision = 1ns //Import the main code into the testbench `include \u0026#34;GatedDLatch.v\u0026#34; module GatedDLatch_tb; //Inputs as registers reg Data; reg WE; //Outputs as wires wire Out; wire OutBar; //Initialisation GatedDLatch uut(Data, WE, Out, OutBar); initial begin //Name of the graph file that gets generated after we run $dumpfile(\u0026#34;GatedDLatch_tb.vcd\u0026#34;); $dumpvars(0,GatedDLatch_tb); Data = 0; WE = 0; #10; Data = 1; #4; WE = 1; #2; WE = 0; #4; Data = 0; #4; WE = 1; #2; WE = 0; #4; $display(\u0026#34;Test complete\u0026#34;); end endmodule 终端运行：\n1 iverilog -o GatedDLatch_tb.vvp GatedDLatch_tb.v 将产生的二进制临时文件 GatedDLatch_tb.vvp 用 vvp 命令转换为 GatedDLatch_tb.vcd waveform file:\n1 vvp GatedDLatch_tb.vvp 安装 Wavetrace 插件后即可查看波形：\n也可以用 gtkwave 软件内查看波形：\n1 2 brew install gtkwave gtkwave GatedDLatch_tb.vcd 下拉 GatedDLatch_tb 列表可显示波形：\nGenerate Schematics 我们需要将画出来的电路拓扑可视化，首先用 YoSYS 将 Verilog 代码转化为数字逻辑电路的门级网表 (gate-level netlist)，先安装 YoSYS:\n1 2 brew install yosys yosys -V # Verify Yosys installation YoSYS 可将电路结构文件 GatedDLatch.v 转换为一个 json 文件：\n1 yosys -p \u0026#34;prep -top GatedDLatch; write_json GatedDLatch.json\u0026#34; GatedDLatch.v 然后我们再安装 netlistsvg 工具:\n1 2 3 4 5 6 7 8 # Install Node.js (if not already installed) brew install node # Install netlistsvg globally using npm npm install -g netlistsvg # Verify netlistsvg installation netlistsvg --version 用 netlistsvg 工具将 GatedDLatch.json 转换为 GatedDLatch.svg:\n1 netlistsvg GatedDLatch.json -o GatedDLatch.svg 预览 GatedDLatch.svg 可得电路结构图。\n程序化流程 在之前建的 Verilog 文件夹下创建一个 Makefile 文件，加入以下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # CIRCUIT_STRUCT = sample CIRCUIT_STRUCT = GatedDLatch iverilog: $(CIRCUIT_STRUCT).v $(CIRCUIT_STRUCT)_tb.v iverilog -o $(CIRCUIT_STRUCT)_tb.vvp $(CIRCUIT_STRUCT)_tb.v vvp: $(CIRCUIT_STRUCT)_tb.vvp vvp $(CIRCUIT_STRUCT)_tb.vvp YOSYS: $(CIRCUIT_STRUCT).json yosys -p \u0026#34;prep -top $(CIRCUIT_STRUCT); write_json $(CIRCUIT_STRUCT).json\u0026#34; $(CIRCUIT_STRUCT).v NETLISTSVG: $(CIRCUIT_STRUCT).json netlistsvg $(CIRCUIT_STRUCT).json -o $(CIRCUIT_STRUCT).svg clean: rm -f $(CIRCUIT_STRUCT)_tb.vvb rm -f $(CIRCUIT_STRUCT)_tb.vcd rm -f $(CIRCUIT_STRUCT).json rm -f $(CIRCUIT_STRUCT)_tb.json rm -f $(CIRCUIT_STRUCT).svg rm -f $(CIRCUIT_STRUCT)_tb.svg run_all: iverilog -o $(CIRCUIT_STRUCT)_tb.vvp $(CIRCUIT_STRUCT)_tb.v vvp $(CIRCUIT_STRUCT)_tb.vvp yosys -p \u0026#34;prep -top $(CIRCUIT_STRUCT); write_json $(CIRCUIT_STRUCT).json\u0026#34; $(CIRCUIT_STRUCT).v netlistsvg $(CIRCUIT_STRUCT).json -o $(CIRCUIT_STRUCT).svg 每次改变文件后只需执行：\n1 2 make clean make run_all 即可生成所有相关文件：\n","date":"2024-08-31T00:00:00Z","image":"http://localhost:1313/p/macos%E6%90%AD%E5%BB%BArtl%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/cover_hu4598471443165578547.png","permalink":"http://localhost:1313/p/macos%E6%90%AD%E5%BB%BArtl%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/","title":"MacOS搭建RTL分析框架"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"http://localhost:1313/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu6307248181568134095.jpg","permalink":"http://localhost:1313/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Design Reviewed | Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode bilibilibi Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-10T00:00:00Z","permalink":"http://localhost:1313/p/rich-content/","title":"Rich Content"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"http://localhost:1313/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"http://localhost:1313/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu5876398126655421130.jpg","permalink":"http://localhost:1313/p/emoji-support/","title":"Emoji Support"}]
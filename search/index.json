[{"content":"Introduction and Overview Building a generic website from scratch is a tough work. However, personal websites for blogs, a special type of website, is actually programmatic. Hugo provides a convenient building templates for that. To make a new blog in Hugo, one could only just create a new folder, write a markdown file (in a specific format) and that\u0026rsquo;s it. You don\u0026rsquo;t need ANY knowledge about HTML or CSS. Well do you need to buy a domain name for everyone to see your posts? Well, GitHub Pages is a free service where you just push some contents in a repository of your own with some extremely easy command line, you created your sites of names like yourname.github.io.\nTools needed Homebrew (Packet Manager) We will use a packet manager called Homebrew to install Hugo. Follow the commands here to download Homebrew first, or you can execute:\n1 /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; Once downloaded, if you don\u0026rsquo;t get any error by entering this in the terminal in any folder, you installed it properly (Install testing):\n1 brew --version Git (Version Control System) You can use Homebrew to install Git:\n1 2 brew install git git --version # install testing Install Hugo Run this in any folder:\n1 brew install hugo Install testing:\n1 hugo version Run Example Theme Create Framework Enter the terminal in any folder, you will be creating another main folder called mysite in it. Folder mysite will contain all the contents that are relevant to your website:\n1 2 hugo new site mysite cd mysite Folder mysite should look like this:\nwith most folders in it empty. This is the framework.\nChoose Theme The themes folder is empty, now we will add some code representing a theme inside it. Now choose a template here and downlaod its source code folder inside the themes folder. I use Stack\n1 2 cd themes/ git clone https://github.com/CaiJimmy/hugo-theme-stack.git # Replace as needed Run Theme Now there should be a folder inside themes. Now copy all the things inside a folder like exampleSite into the main mysite folder (\u0026lsquo;\u0026lsquo;replace\u0026rsquo;\u0026rsquo;).\nGo to the main mysite folder and remove the original hugo.tomal file, or you can do:\n1 2 pwd # should be in \u0026#34;mysite\u0026#34; rm hugo.tomal Then (in mysite folder), run:\n1 hugo server -D it will prompt something like:\n1 2 3 4 5 6 Built in 865 ms Environment: \u0026#34;development\u0026#34; Serving pages from disk Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:53844/ (bind address 127.0.0.1) Press Ctrl+C to stop Enter the link provided (http://localhost:53844/). You are done!\nPlay Around This is easy, just compare the contents in each folder and the website and modify things a little.\nPublish your website Note the link (http://localhost:53844/) is private and cannot be visited on other devices. So follow these steps to publish it:\nCreate GitHub Repository Go to your GitHub page and click \u0026lsquo;+\u0026rsquo; on the right upper corner, choose New repository and name it like this:\ni.e., yourname.github.io, which will be your own domain name.\nPush Contents Run this:\n1 hugo --theme=hugo-theme-stack --baseURL=\u0026#34;https://yourname.github.io/\u0026#34; --buildDrafts Then push the contents in your folder public on it by:\n1 2 3 4 5 6 cd public git init git remote add origin https://github.com/yourname/yourname.github.io.git # change as needed git add . git commit -m \u0026#34;Initial commit\u0026#34; git push -u origin main You can access your website on https://yourname.github.io/ within several minutes.\nNotes After you change contents locally, the contents on https://yourname.github.io/ will not change automatically, you will have to push it on GitHub again:\n1 2 3 4 cd public git add . git commit -m \u0026#34;Add something new\u0026#34; git push origin main Also the public website will not update instantly, you will have to wait several minutes.\n","date":"2024-08-31T00:00:00Z","permalink":"http://localhost:1313/p/create-your-own-website-using-hugo-on-macos/","title":"Create your own website using Hugo on MacOS"},{"content":"Intro and Overview References CLAIM: 本文综合了多个网站的结论和方法，并非原创。\nYou may find these websites useful:\nWorkflow for FPGA development Some open-source tools IceStudio for M2 Mac FPGA Toolchain VHDL compile chain on MacOS Tools related You need these:\ngtkwave: main RTL wave creator Icarus Verilog, and this manual YoSYS: .v to .json GHDL: compile, link and simulation tool for VHDL netlistsvg: .json to .svg Not nessasarily required:\nPulseview: Logic Analyzer (Not required though) Digital: Visual simulation Useful vscode plugins:\nVerilog Support: vscode verilog language highlighter Wavetrace: A nice vscode plugin to replace gtkwave First Project in Verilog Install Icarus Verilog Compiler 1 brew install icarus-verilog Compilation and Simulation 新建文件夹Verilog，在其中新建两个测试文件：GatedDLatch.v and GatedDLatch_tb.v，前者为电路结构描述文件，后者为testbench文件，分别写入以下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // in GatedDLatch.v module GatedDLatch (Data, WE, Out, OutBar); input Data; input WE; output Out; output OutBar; // component name(output, input1, input2) wire S; wire R; wire Dbar; nand g1(S, Data, WE); not g2(Dbar, Data); nand g3(R, WE, Dbar); nand g4(Out, S, OutBar); nand g5(OutBar, R, Out); endmodule and\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // in GatedDLatch_tb.v `timescale 1ns / 1ns // simulation time, time precision = 1ns //Import the main code into the testbench `include \u0026#34;GatedDLatch.v\u0026#34; module GatedDLatch_tb; //Inputs as registers reg Data; reg WE; //Outputs as wires wire Out; wire OutBar; //Initialisation GatedDLatch uut(Data, WE, Out, OutBar); initial begin //Name of the graph file that gets generated after we run $dumpfile(\u0026#34;GatedDLatch_tb.vcd\u0026#34;); $dumpvars(0,GatedDLatch_tb); Data = 0; WE = 0; #10; Data = 1; #4; WE = 1; #2; WE = 0; #4; Data = 0; #4; WE = 1; #2; WE = 0; #4; $display(\u0026#34;Test complete\u0026#34;); end endmodule 终端运行：\n1 iverilog -o GatedDLatch_tb.vvp GatedDLatch_tb.v 将产生的二进制临时文件 GatedDLatch_tb.vvp 用 vvp 命令转换为 GatedDLatch_tb.vcd waveform file:\n1 vvp GatedDLatch_tb.vvp 安装 Wavetrace 插件后即可查看波形：\n也可以用 gtkwave 软件内查看波形：\n1 2 brew install gtkwave gtkwave GatedDLatch_tb.vcd 下拉 GatedDLatch_tb 列表可显示波形：\nSynthesis and Visualization 我们需要将画出来的电路拓扑可视化（产生Schematics），首先用 YoSYS 将 Verilog 代码转化为数字逻辑电路的门级网表 (gate-level netlist)，先安装 YoSYS:\n1 2 brew install yosys yosys -V # Verify Yosys installation YoSYS 可将电路结构文件 GatedDLatch.v 转换为一个 json 文件：\n1 yosys -p \u0026#34;prep -top GatedDLatch; write_json GatedDLatch.json\u0026#34; GatedDLatch.v 然后我们再安装 netlistsvg 工具:\n1 2 3 4 5 6 7 8 # Install Node.js (if not already installed) brew install node # Install netlistsvg globally using npm npm install -g netlistsvg # Verify netlistsvg installation netlistsvg --version 用 netlistsvg 工具将 GatedDLatch.json 转换为 GatedDLatch.svg:\n1 netlistsvg GatedDLatch.json -o GatedDLatch.svg 预览 GatedDLatch.svg 可得电路结构图：\nMakefile Work Flow 可见整个流程分为上述独立的两大块：\n编译、仿真 iverilog (Compilation) vvp (Simulation) 合成、电路结构可视化 yosys (Synthesis) netlistsvg (Visualization) 我们用 Makefile 自动化这个过程（确保你装了Make有关组件）：在之前建的 Verilog 文件夹下创建一个 Makefile 文件，加入以下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 # Description: Makefile for GatedDLatch CIRCUIT_STRUCT = GatedDLatch # Directories BUILD_DIR = build # Ensure the build directory exists $(BUILD_DIR): mkdir -p $(BUILD_DIR) # Compilation: iverilog compilation iverilog: $(CIRCUIT_STRUCT).v $(CIRCUIT_STRUCT)_tb.v | $(BUILD_DIR) iverilog -o $(BUILD_DIR)/$(CIRCUIT_STRUCT)_tb.vvp $(CIRCUIT_STRUCT)_tb.v # Simulation: generate waveform (.vcd) vvp: $(BUILD_DIR)/$(CIRCUIT_STRUCT)_tb.vvp vvp $(BUILD_DIR)/$(CIRCUIT_STRUCT)_tb.vvp # Synthesis: generate circuit structure configuration file (.json) YOSYS: $(CIRCUIT_STRUCT).v | $(BUILD_DIR) yosys -p \u0026#34;prep -top $(CIRCUIT_STRUCT); write_json $(BUILD_DIR)/$(CIRCUIT_STRUCT).json\u0026#34; $(CIRCUIT_STRUCT).v # Visualization: generate human readable (.svg) from .json NETLISTSVG: $(BUILD_DIR)/$(CIRCUIT_STRUCT).json | $(BUILD_DIR) netlistsvg $(BUILD_DIR)/$(CIRCUIT_STRUCT).json -o $(BUILD_DIR)/$(CIRCUIT_STRUCT).svg # Schematic diagram only: Synthesis then Visualization schematic: YOSYS NETLISTSVG # Run all steps run_all: iverilog vvp schematic # Clean build directory clean: rm -rf $(BUILD_DIR) rm -f $(CIRCUIT_STRUCT)_tb.vcd 每次改变文件后只需执行：\n1 2 make clean make run_all 即可生成所有相关文件：\nFirst Project in VHDL Install GHDL Compiler 和 Verilog 一样，VHDL 也是一种硬件描述语言。编译它需要另一个工具：GHDL. 在MacOS上安装它有几个坑，以下步骤在M2 Mac上实测有效（截止2024-09-01）：\n用 brew 安装vhdl:\n1 brew install vhdl vhdl 有两个版本：LLVM和mcode，LLVM版本在Mac上有点问题，而brew下载的正是这个版本，所以我们从这里手动下载mcode的组件，我下的是 ghdl-macos-11-mcode.tgz。\n双击解压，得到三个文件\n将这三个文件复制粘贴到这个路径：/opt/homebrew/Caskroom/ghdl/4.1.0:\n终端输入：\n1 ghdl --version 如果有安全性提示，到系统设置 Privacy \u0026amp; Security 中允许即可:\nCompilation, Linking and Simulation 与Verilog不同，VHDL多了一步Linking，就是将component声明和其实体文件 (testbench) 链接在一起。Verilog为什么不要这一步？因为testbench文件中包含了声明的内容 (include \u0026quot;GatedDLatch.v\u0026quot; )，可自动链接。\nVerilog 中我们用了两中不同的工具 (iverilog, vvp) 来完成编译和仿真。而VHDL只用一个工具：GHDL.\n新建文件夹VHDLDemo，在其中新建两个测试文件：demo.vhdl and demo_tb.vhdl，前者为电路结构描述文件，后者为testbench文件 (也可用.vhd为后缀)，分别写入以下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity demo is port ( A : in STD_LOGIC; B : in STD_LOGIC; O : out STD_LOGIC ); end demo; architecture Behavioral of demo is begin O \u0026lt;= not (A and B); -- NAND gate end Behavioral; and\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity demo_tb is end demo_tb; architecture Behavioral of demo_tb is signal A : STD_LOGIC := \u0026#39;0\u0026#39;; signal B : STD_LOGIC := \u0026#39;0\u0026#39;; signal O : STD_LOGIC; -- Instantiate the unit under test (UUT) component demo port ( A : in STD_LOGIC; B : in STD_LOGIC; O : out STD_LOGIC ); end component; begin UUT: demo port map ( A =\u0026gt; A, B =\u0026gt; B, O =\u0026gt; O ); -- Test process process begin -- Test case 1: A = 0, B = 0 A \u0026lt;= \u0026#39;0\u0026#39;; B \u0026lt;= \u0026#39;0\u0026#39;; wait for 10 ns; -- Test case 2: A = 0, B = 1 A \u0026lt;= \u0026#39;0\u0026#39;; B \u0026lt;= \u0026#39;1\u0026#39;; wait for 10 ns; -- Test case 3: A = 1, B = 0 A \u0026lt;= \u0026#39;1\u0026#39;; B \u0026lt;= \u0026#39;0\u0026#39;; wait for 10 ns; -- Test case 4: A = 1, B = 1 A \u0026lt;= \u0026#39;1\u0026#39;; B \u0026lt;= \u0026#39;1\u0026#39;; wait for 10 ns; -- End of simulation wait; end process; end Behavioral; 再建立一个 Makefile 文件实现自动化：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 # Description: Makefile for VHDLDemo CIRCUIT = demo TB = demo_tb BUILD_DIR = build # Ensure the build directory exists $(BUILD_DIR): mkdir -p $(BUILD_DIR) # Compilation: compile the design and testbench ghdl_compile: $(BUILD_DIR) ghdl -a --workdir=$(BUILD_DIR) $(CIRCUIT).vhdl ghdl -a --workdir=$(BUILD_DIR) $(TB).vhdl # Linking: Elaborate the design and testbench ghdl_elab: ghdl_compile ghdl -e --workdir=$(BUILD_DIR) $(TB) # Simulation: simulate the testbench ghdl_simulate: ghdl_elab ghdl -r --workdir=$(BUILD_DIR) $(TB) --vcd=$(BUILD_DIR)/$(TB).vcd ### These cannot work for now############################################## # # Synthesis: generate circuit structure configuration file (.json), you should have ghdl plugin installed for yosys, but I have error: \u0026#34;ERROR: No such command: ghdl\u0026#34; or \u0026#34;dyld[5264]: missing symbol called\u0026#34;, possible solution could be to install yosys from source, but not sure # YOSYS: $(CIRCUIT).vhdl | $(BUILD_DIR) # yosys -p \u0026#34;ghdl $(CIRCUIT); prep -top $(CIRCUIT); write_json -compat-int $(BUILD_DIR)/$(CIRCUIT).json\u0026#34; $(CIRCUIT).vhdl # # Visualization: generate human readable (.svg) from .json # NETLISTSVG: $(BUILD_DIR)/$(CIRCUIT).json | $(BUILD_DIR) # netlistsvg $(BUILD_DIR)/$(CIRCUIT).json -o $(BUILD_DIR)/$(CIRCUIT).svg # # Schematic diagram only: Synthesis then Visualization # schematic: YOSYS NETLISTSVG # # Run all steps # run_all: ghdl_compile ghdl_elab ghdl_simulate YOSYS NETLISTSVG ### These cannot work for now############################################## # Run compilation, linking and simulation run_cls: ghdl_compile ghdl_elab ghdl_simulate # Clean build directory clean: rm -rf $(BUILD_DIR) rm -f $(TB) # Experiment: Run testbench without the design file run_tb_only: $(BUILD_DIR) ghdl -a --workdir=$(BUILD_DIR) $(TB).vhdl ghdl -r --workdir=$(BUILD_DIR) $(TB) --vcd=$(BUILD_DIR)/$(TB)_no_design.vcd 运行过程自行理解。命令行执行：\n1 2 make clean make run_cls 即可。\n如果你要看如果不编译链接 design file (demo.vhdl) 会出来什么，可以运行：\n1 2 make clean # Cannot omitted! make run_tb_only 你可以在vscode中或用gtkwave对比两次生成的 .vcd 文件，它们是有区别的。\nNo Synthesis and Visualization Plan 注意这个 Makefile 没有包括画schematic diagram, 因为 yosys 需要装 ghdl 插件，目前适配不是很好，具体可参考 ghdl-yosys-plugin, building-ghdl, 前者提到的方法在M2 Mac上已经试过，会报错：\n1 2 3 4 5 6 7 8 9 10 11 12 /----------------------------------------------------------------------------\\ | yosys -- Yosys Open SYnthesis Suite | | Copyright (C) 2012 - 2024 Claire Xenia Wolf \u0026lt;claire@yosyshq.com\u0026gt; | | Distributed under an ISC-like license, type \u0026#34;license\u0026#34; to see terms | \\----------------------------------------------------------------------------/ Yosys 0.44 (git sha1 80ba43d26, clang++ 15.0.0 -fPIC -O3) -- Running command `ghdl demo_tb.vhdl -e demo_tb; prep -top demo_tb; write_json demo.json\u0026#39; -- 1. Executing GHDL. dyld[5264]: missing symbol called zsh: abort yosys -m ghdl -p 这个问题在 ghdl-yosys-plugin 的 Issues 里面也有人问了，没答案。\n可能的解决方法是从源文件自行编译安装yosys，或者 yosys 或 ghdl 的版本不对，或缺少了工具链中的某个工具。或者用某个工具将 VHDL 转成 Verilog 后再合成 Schematics.\n","date":"2024-08-31T00:00:00Z","image":"http://localhost:1313/p/macos%E6%90%AD%E5%BB%BArtl%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/cover_hu4598471443165578547.png","permalink":"http://localhost:1313/p/macos%E6%90%AD%E5%BB%BArtl%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/","title":"MacOS搭建RTL分析框架"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"http://localhost:1313/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu6307248181568134095.jpg","permalink":"http://localhost:1313/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Design Reviewed | Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode bilibilibi Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-10T00:00:00Z","permalink":"http://localhost:1313/p/rich-content/","title":"Rich Content"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"http://localhost:1313/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"http://localhost:1313/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu5876398126655421130.jpg","permalink":"http://localhost:1313/p/emoji-support/","title":"Emoji Support"}]
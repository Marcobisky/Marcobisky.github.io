---
author: Marcobisky
title: "How I Learn and Imagine Things"
description: 关于如何学习和想象
date: 2025-7-9
# image: point-charge-case.png
categories:
    - Thoughts
format: 
    html: default
---

以下主要是本人大四学习过程中的一些小经验, 个人的记录, 图一乐.

- **没有适用于所有人的学习方法**. 
- **具象而非抽象**. 所有的代码例子都用具体的实例.
- **系统性学习是一种错觉**. 仅仅学习碎片化的**关键范式转变**和**有趣的例子**, 你的大脑会自动把他们连接上. 写 Blog 可以加速这一过程和对抗遗忘机制.
    - 所以用到什么学什么 (这与数学有些不同).
- 关于利用写 Blog 来学习:
    - Blog 不要从头写到尾, **直接从你最想学习的地方开始写**.

- 我总觉得世界上这么多人学出来的东西似乎都大差不差. 不同的领域会有几乎相同的观点和范式转换 (比如由集合论到范畴论和数据指令到函数式编程), 只不过不同领域间的人无法交流和共享名词, 以至于相同的思想被不断地「发现」和被起出不同的名词. 而且人类大脑还有以下特点:
    - 不能第一时间察觉两个**不同**领域的**相同**观点.
    - 自己获得的经验具有崇高的地位. 

    这些思想并不是一串字符, 而是有着上下文背景和复杂结构的抽象数学对象 (比如机器学习里的「潜在空间」). 各种「名人名言」是这些思想的具体体现, 其中蕴含大量的重复内容, if you go through each other's heads. (比如 “大道至简”、“如无必要, 勿增实体”; “原教旨主义”、“不忘初心”; “上帝能不能造出自己都不能搬起的石头”、“哥德尔不完备”、“理发师悖论”、“公理集论”、“画手的手”; “计划经济”、“数据+指令的 CPU”、“冯诺伊曼瓶颈”; “市场经济”、“混沌理论”、“元胞自动机”) 甚至各种职业做的本质上也是相似的事情 (比如 Paul Graham 的「黑客与画家」, 无调性音乐, 蒙德里安的格子, 纯数学研究, etc.)

- 计算机的未来很可能与以下关键词有关: 涌现、去中心化、元胞自动机、非冯诺伊曼架构、量子理论、类脑芯片. (打败魔法的只有魔法, 人类研究不清楚的东西不能规划出来 (比如优化、梯度下降), 只能实验出来 (暴力增大数据量)).

- 关于如何阅读开源项目和贡献: 
    - fork 下来, 先单独了解项目的每个子模块是干嘛的, 输入输出是什么?
    - 如果太困难, 放弃了解细节, 直接先让最高层的东西工作起来, 在这个过程中留意一点细节就行.
    - 这个项目的结构是什么? 这些子模块是如何集成在一起的?
    - 有些项目会有很多的文件, 但是有可能很多只是开发者针对不同平台写的支持文件, 当你选择了某个平台后, 只有少量的文件会用到, 其它的文件完全可以忽略!

        ![`common_soc`, `hps`, `sim` 就是三种不同的平台, 他们在同一时间只会有其中一个被执行](platform-choice.png){width=60%}

    - Just start working on it!

- 如何开始阅读一本 (学术) 书籍:
    - 如果你觉得 Introduction 都读不懂, 建议直接看名字吸引你的那一章, 然后开始读.

> 当有人说 “我想要一个编程语言, 这个语言我只需要直接写我要干什么” 的时候, 你还是给他一个棒棒糖吧. -- Alan Perlis

- 感觉所有编程语言都有**合法**但容易造成 bug 的用法. 有没有哪个编程语言能够避免这种问题?

- 有的时候一个知识 (特别是神经网络) 中的某个概念或思想的引出总会有很多不同的动机和切入点, 其中一个办法是将这些动机一个个都列出来. 但是难办的地方就在于这些动机之间仔细想想是非常有关联的 (也许用图的形式可以表达?), 甚至后来他们都变成了同一种想法. 这样来说就没有区分的必要了, 甚至做笔记的必要都没有了. 但是自己以后又会忘记 (

- 如何看视频学习:
    - **二分法**: 任何视频, 直接进度条拉到 $1/2$ 位置, 如果能理解, 后面继续 $1/2$; 不能理解, 前面拉到 $1/2$, etc.

- **Abstraction 抽象层**: 我一开始很不习惯抽象层, 而 CS 的学习过程中我发现没有办法避免抽象层的使用, 在每个阶段都待在某个抽象层当中, 只不过有些抽象层高, 有些低. 如果抽象层时低的话, 会让人觉得自己在学所谓「本质」的东西, 但你仔细想想, 你学理论物理的时候仍然会有很多 API, 比如能量为什么守恒, 为什么定义 Lagrangian, 为什么有稳定作用量原理, etc. 所以如果你在学高层的知识 (比如计算机网络) 的时候感到不自如, 而学习相对低层的知识 (比如计算机组成原理, 抽象代数, 理论物理) 的时候感到自如, 只能说明你有所信仰, 难听点就是不求甚解、没有怀疑一切的精神. 既然我们学习任何东西都是在某个抽象层完成的, 那你对他们的理解与感觉就应该是一样的!
    - 比如 ISA 的具体实现和与 ISA 无关的基本框架可以处于两个完全不同的抽象层中. Be aware!

- **语言与键盘侠**: 这个世界上几乎任何一种行为都能用两种相反的价值判断语句来描述, 比如你一直做某件事, 十年如一日, 可以说你坚持不懈, 也可以说你固执己见. 如果你听到某种声音, 放弃了自己坚持的事情, 可以说你虚心接受批评, 也可以说你没有主见. 如果说一个人有坚持的精神, 如果他最后失败了, 他的精神还值得赞扬吗? 大多数评论都是等结果出来了之后发出的, 所以过程本身并没有意义与评论的价值吗? 一切对一个人的评论都是基于结果的吗? 这个人本身的行为不被任何语言所定义, 他做出的事情也不能用成功与失败来评价吗, 他做的事情就是一个中性的集合体
    - **语言与名词**: 一个事件永远不能被一个名词总结, 二者的信息量完全不一样. 当我们定义一个名词的时候, 我们真正定义了它吗? 他在每个人大脑里映射出来的语义是一样的吗? 还是说每个人都在用自己的方式理解这个名词? 如果是这样, 交流的意义何在? 
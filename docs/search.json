[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "My posts",
    "section": "",
    "text": "EM Chapter I: Maxwell‚Äôs First Equation\n\n\n\n\n\n\nPhysics\n\n\n\nUnderstand \\(\\mathbf{\\nabla} \\cdot \\mathbf{E} = \\frac{\\rho}{\\varepsilon_0}\\) in one article!\n\n\n\n\n\nMar 7, 2025\n\n\nMarcobisky\n\n\n\n\n\n\n\n\n\n\n\n\nQ&A: Basis vectors are exactly the same as partial derivative operator?\n\n\n\n\n\n\nDifferential-Geometry\n\n\n\nWhy \\(e_i\\) is exactly the same as \\(\\frac{\\partial}{\\partial x^i}\\)? How to define tangent space at some point of a manifold?\n\n\n\n\n\nMar 4, 2025\n\n\nMarcobisky\n\n\n\n\n\n\n\n\n\n\n\n\nWhat is symmetry?\n\n\n\n\n\n\nAlgebra\n\n\n\nSymmetry is nothing but a group acts on an object!\n\n\n\n\n\nMar 3, 2025\n\n\nMarcobisky\n\n\n\n\n\n\n\n\n\n\n\n\nJK Flip-flop not Behavioral (VHDL version)\n\n\n\n\n\n\nHardware\n\n\n\nEasy to write a behavioral description of JK-FF in VHDL, what about writing it in terms of gates?\n\n\n\n\n\nDec 8, 2024\n\n\nMarcobisky\n\n\n\n\n\n\n\n\n\n\n\n\nÂú® ios ‰∏ãËΩΩÁ¨¨‰∏âÊñπÂ∫îÁî®\n\n\n\n\n\n\nAwesome-Mac\n\n\n\n‰ºöÈó™ÈÄÄ, Êï£‰∫ÜÂêß(¬¥ÔΩ•_ÔΩ•`)\n\n\n\n\n\nOct 29, 2024\n\n\nMarcobisky\n\n\n\n\n\n\n\n\n\n\n\n\nLeast Squares as Projection ÊúÄÂ∞è‰∫å‰πòÊ≥ïÁöÑÊäïÂΩ±Ëß£Èáä\n\n\n\n\n\n\nAlgebra\n\n\n\nThinking least squares in this way really helps!\n\n\n\n\n\nSep 21, 2024\n\n\nMarcobisky\n\n\n\n\n\n\n\n\n\n\n\n\njavaÈ°πÁõÆÂØºÂÖ•LaunchpadÊñπÊ°à MacOS\n\n\n\n\n\n\nAwesome-Mac\n\n\n\n\n\n\n\n\n\nSep 11, 2024\n\n\nMarcobisky\n\n\n\n\n\n\n\n\n\n\n\n\nRTL Analysis on MacOS under 300MB\n\n\n\n\n\n\nAwesome-Mac\n\n\n\nWanna compile verilog on MacOS but without programing an FPGA? Check this out!\n\n\n\n\n\nAug 31, 2024\n\n\nMarcobisky\n\n\n\n\n\n\n\n\n\n\n\n\nCreate your own website using Hugo on MacOS\n\n\n\n\n\n\nCS\n\n\n\nThis is how I built my first personal website without any prior knowledge of HTML.\n\n\n\n\n\nAug 31, 2024\n\n\nMarcobisky\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jinming Ren",
    "section": "",
    "text": "Hi! I‚Äôm an third-year undergrad student at University of Electronic Science and Technology of China (UESTC) and University of Glasgow (UofG). I majored in electronic and communication engineering (ECE).\nI‚Äôm looking for a PhD position in wireless communication or ML in 2026, I love axiomatic thinking and innovation. See my CV here.\nOn this site I also keep a partial list of blogs, which is still actively updating.\n\n\n\n\nüìß Email: 3191293752@qq.com | marcobisky@outlook.com\n\nüìû Phone: +86 17882004164"
  },
  {
    "objectID": "index.html#bio",
    "href": "index.html#bio",
    "title": "Jinming Ren",
    "section": "",
    "text": "Hi! I‚Äôm an third-year undergrad student at University of Electronic Science and Technology of China (UESTC) and University of Glasgow (UofG). I majored in electronic and communication engineering (ECE).\nI‚Äôm looking for a PhD position in wireless communication or ML in 2026, I love axiomatic thinking and innovation. See my CV here.\nOn this site I also keep a partial list of blogs, which is still actively updating."
  },
  {
    "objectID": "index.html#contact",
    "href": "index.html#contact",
    "title": "Jinming Ren",
    "section": "",
    "text": "üìß Email: 3191293752@qq.com | marcobisky@outlook.com\n\nüìû Phone: +86 17882004164"
  },
  {
    "objectID": "posts/jk-ff/index.html",
    "href": "posts/jk-ff/index.html",
    "title": "JK Flip-flop not Behavioral (VHDL version)",
    "section": "",
    "text": "Most online VHDL descriptions of JK flip-flops (FF) are based on ‚Äúprocesses‚Äù or circuit functionality (behavioral). Is it possible to simulate them only by constructing the circuit structure of the JK flip-flop?"
  },
  {
    "objectID": "posts/jk-ff/index.html#intro",
    "href": "posts/jk-ff/index.html#intro",
    "title": "JK Flip-flop not Behavioral (VHDL version)",
    "section": "",
    "text": "Most online VHDL descriptions of JK flip-flops (FF) are based on ‚Äúprocesses‚Äù or circuit functionality (behavioral). Is it possible to simulate them only by constructing the circuit structure of the JK flip-flop?"
  },
  {
    "objectID": "posts/jk-ff/index.html#jk-ff-review",
    "href": "posts/jk-ff/index.html#jk-ff-review",
    "title": "JK Flip-flop not Behavioral (VHDL version)",
    "section": "JK FF Review",
    "text": "JK FF Review\nThe circuit structure is JK FF is very familiar to everybody, which is: \nThe corresponding truth table is shown below:\n\n\n\nC\nJ\nK\nQ\nQÃÖ\n\n\n\n\n‚Üë\n0\n0\nlatch\nlatch\n\n\n‚Üë\n0\n1\n0\n1\n\n\n‚Üë\n1\n0\n1\n0\n\n\n‚Üë\n1\n1\ntoggle\ntoggle\n\n\nx\n0\n0\nlatch\nlatch\n\n\nx\n0\n1\nlatch\nlatch\n\n\nx\n1\n0\nlatch\nlatch\n\n\nx\n1\n1\nlatch\nlatch\n\n\n\nwhere ‚Äúlatch‚Äù represent the Q output remembers whatever the last stored value was. ‚ÄúToggle‚Äù means to flip Q, i.e.¬†0 -&gt; 1, 1 -&gt; 0. ‚Äú‚Üë‚Äù means the clock signal in a leading edge."
  },
  {
    "objectID": "posts/jk-ff/index.html#problem",
    "href": "posts/jk-ff/index.html#problem",
    "title": "JK Flip-flop not Behavioral (VHDL version)",
    "section": "Problem",
    "text": "Problem\n\nFirst try\nWrite the following content in JKFF.vhdl:\nlibrary IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\n\nentity JKFF_nodelay is\n    Port (\n        J : in STD_LOGIC;     -- J input\n        K : in STD_LOGIC;     -- K input\n        clk : in STD_LOGIC;   -- Clock input\n        Q : out STD_LOGIC;    -- Output Q\n        QN : out STD_LOGIC    -- Output QN (complement of Q)\n    );\nend JKFF_nodelay;\n\narchitecture Structural of JKFF_nodelay is\n    -- Internal signals for latch and clock gating\n    signal S, R : STD_LOGIC;    -- Set and Reset inputs for the latch\n    signal Q_int, QN_int : STD_LOGIC := '0'; -- Internal Q and QN for feedback\n\nbegin\n    S &lt;= (J and clk) and QN_int;\n    R &lt;= (K and clk) and Q_int;\n\n    -- NOR gate-based latch\n    Q_int &lt;= not (R or QN_int);\n    QN_int &lt;= not (S or Q_int);\n\n    -- Outputs\n    Q &lt;= Q_int;    -- Main output\n    QN &lt;= QN_int;  -- Complementary output\nend Structural;\nThen write a testbench file to test the behavior of this circuit, you will find it will not work well.\n\n\nReason\nThe reason (probably, only personal view) is that JK FF have two layers of feedback (instead of SR FF, which just have one), since we loop our output Q not only to the NOR gates, but also AND to our initial inputs J and K. This confuse the compiler because the resultant signal changes so fast and maybe not have a stable consequence, so the compiler do not know how to respond to this kind of feedback.\nSo we introduce some delay in the gates to simulate the reality closer."
  },
  {
    "objectID": "posts/jk-ff/index.html#solution",
    "href": "posts/jk-ff/index.html#solution",
    "title": "JK Flip-flop not Behavioral (VHDL version)",
    "section": "Solution",
    "text": "Solution\n\nAdding delay in the gates\nWe write the following content in another file JKFF.vhdl:\nlibrary IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\n\nentity JKFF is\n    Port (\n        J : in STD_LOGIC;     -- J input\n        K : in STD_LOGIC;     -- K input\n        clk : in STD_LOGIC;   -- Clock input\n        Q : out STD_LOGIC;    -- Output Q\n        QN : out STD_LOGIC    -- Output QN (complement of Q)\n    );\nend JKFF;\n\narchitecture Structural of JKFF is\n    -- Internal signals for latch and clock gating\n    signal S, R : STD_LOGIC;    -- Set and Reset inputs for the latch\n    signal Q_int, QN_int : STD_LOGIC := '0'; -- Internal Q and QN for feedback\n\nbegin\n    S &lt;= (J and clk) and QN_int after 0.1 ns;\n    R &lt;= (K and clk) and Q_int after 0.1 ns;\n\n    -- NOR gate-based latch\n    Q_int &lt;= not (R or QN_int) after 0.2 ns;\n    QN_int &lt;= not (S or Q_int) after 0.2 ns;\n\n    -- Outputs\n    Q &lt;= Q_int;    -- Main output\n    QN &lt;= QN_int;  -- Complementary output\nend Structural;\nAnd run the following JKFF_tb.vhdl:\nlibrary IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\n\nentity JKFF_tb is\n-- No ports for testbench\nend JKFF_tb;\n\narchitecture Behavioral of JKFF_tb is\n    -- Component declaration\n    component JKFF\n        Port (\n            J : in STD_LOGIC;\n            K : in STD_LOGIC;\n            clk : in STD_LOGIC;\n            Q : out STD_LOGIC;\n            QN : out STD_LOGIC\n        );\n    end component;\n\n    -- Signals to connect to the JKFF\n    signal J, K, clk : STD_LOGIC := '0';\n    signal Q, QN : STD_LOGIC;\n\nbegin\n    -- Instantiate the JK Flip-Flop\n    uut: JKFF\n        Port Map (\n            J =&gt; J,\n            K =&gt; K,\n            clk =&gt; clk,\n            Q =&gt; Q,\n            QN =&gt; QN\n        );\n\n    -- Clock generation process\n    clk_gen: process\n    begin\n        for i in 0 to 9 loop -- Generate 10 clock cycles\n            clk &lt;= '0';\n            wait for 9 ns; -- Low for 5 ns\n            clk &lt;= '1';\n            wait for 1 ns; -- High for 5 ns\n        end loop;\n        wait; -- End simulation after clock finishes\n    end process;\n\n    -- Stimulus process to apply test cases\n    stimulus: process\n    begin\n        -- Test Case 1: Hold state (J = 0, K = 0)\n        J &lt;= '0'; K &lt;= '0';\n        wait for 20 ns;\n\n        -- Test Case 2: Set state (J = 1, K = 0)\n        J &lt;= '1'; K &lt;= '0';\n        wait for 20 ns;\n\n        -- Test Case 3: Reset state (J = 0, K = 1)\n        J &lt;= '0'; K &lt;= '1';\n        wait for 20 ns;\n\n        -- Test Case 4: Toggle state (J = 1, K = 1)\n        J &lt;= '1'; K &lt;= '1';\n        wait for 40 ns;\n\n        -- Return to Hold state\n        J &lt;= '0'; K &lt;= '0';\n        wait for 20 ns;\n\n        wait; -- End simulation\n    end process;\nend Behavioral;\n\n\nResults\nWe will get the following waveform:\n\nThere are several strange things happen here:\n\nWhat happen before around 30 ns?\nThe Q and QN oscillates at the same pace. Why? It‚Äôs because both J and K are zero. For a JK FF, this means to remember the last value. But the last value of Q and QN are both zero (we initialize them in the JKFF.vhdl file):\nsignal Q_int, QN_int : STD_LOGIC := '0'; -- Internal Q and QN for feedback\nThis is invalid and unstable! So they oscillates with a period of 0.2 ns, which is exactly the delay time of the NOR gates.\n\n\n\nLocally zoomed in\n\n\nOK, if instead we initialize the Q and QN a valid value, say Q_int=0 and QN_int=1 like this (in JKFF.vhdl file):\nsignal Q_int : STD_LOGIC := '0'; -- Internal Q for feedback\nsignal QN_int : STD_LOGIC := '1'; -- Internal QN for feedback\nSince they are valid, hence stable, Q and QN will not oscillates as expected:\n\n\n\nWhy not toggle successfully?\nAt around \\(t = 70\\) ns, both J and K are 1. This means at the leading edge of the clock signal clk, Q and QN should both flipped! But according to the waveform, they tried but failed, with a tiny pulse around that time.\nI tried several clk pulse width and analysed the JK circuit in ‚Äúslow-motion‚Äù carefully (Try this! Very surprising!). Finally I figured it out:\nIt‚Äôs because JK FF don‚Äôt want the clk signal be high for too long. This is because if the clk line hold high for a sufficient long period, the signal at Q and QN will ‚Äúbackpropagate‚Äù (Haha just borrow the term) to the inputs, continue to control whether or not the J and K signal should come in. If we increase the so-called ‚Äúduty-ratio‚Äù of the clk signal, we will see these:\n\n\n\nDuty ratio = 0.20\n\n\n\n\n\nDuty ratio = 0.30\n\n\n\n\n\nDuty ratio = 0.40\n\n\n\n\n\nDuty ratio = 0.65\n\n\nSome value of duty ratio (e.g.¬†0.65) happen to toggle the Q successfully, while others do not.\nYou can think of what value could the duty ratio be? (Given the clock cycle and the propagation delay of all gates) This is a very intereting yet tedious problem to consider. But as long as you understand why Q oscillates, you understand this.\nTherefore people say that there are no ‚ÄúJK latches‚Äù."
  },
  {
    "objectID": "posts/jk-ff/index.html#conclusion",
    "href": "posts/jk-ff/index.html#conclusion",
    "title": "JK Flip-flop not Behavioral (VHDL version)",
    "section": "Conclusion",
    "text": "Conclusion\nThe VHDL realization of a JK FF can be achieved by introducing propagation delay to the gates."
  },
  {
    "objectID": "posts/side-ios/index.html",
    "href": "posts/side-ios/index.html",
    "title": "Âú® ios ‰∏ãËΩΩÁ¨¨‰∏âÊñπÂ∫îÁî®",
    "section": "",
    "text": "CLAIM: Êõ¥Êñ∞(2-22-2025), SideStoreÂú®iPhone‰∏ä‰ºöÈó™ÈÄÄ!! ‰ª•‰∏ãÊìç‰ΩúÊó†Ê≥ï‰øùËØÅÁ®≥ÂÆöËøêË°å!"
  },
  {
    "objectID": "posts/side-ios/index.html#ËØ¥Êòé",
    "href": "posts/side-ios/index.html#ËØ¥Êòé",
    "title": "Âú® ios ‰∏ãËΩΩÁ¨¨‰∏âÊñπÂ∫îÁî®",
    "section": "ËØ¥Êòé",
    "text": "ËØ¥Êòé\n‰∏ãÈù¢ÁöÑÊìç‰ΩúÂ∑≤Âú®Ê¨ßÁâàiphone 16 pro ios 18.1‰∏äÊµãËØïÊàêÂäüÔºå‰ΩÜÊàë‰∏™‰∫∫ÊÑüËßâËøô‰∏™Êìç‰ΩúË∑üÊ¨ßÁâàiPhoneÊ≤°Êúâ‰ªÄ‰πàÂÖ≥Á≥ªÔºåÂÖ∂‰ªñÁâàÊú¨ÁöÑiPhoneÂ§ßÊ¶ÇÁéáÂ∫îËØ•‰πüÂèØ‰ª•Ôºå‰ΩÜÊòØ‰∏ç‰øùËØÅ„ÄÇ\nÊú¨ÊñáÂèÇËÄÉÈìæÊé•Ôºö\n\nlist of tools\nsideloadly\nsidestore"
  },
  {
    "objectID": "posts/side-ios/index.html#what-is-side-downloading",
    "href": "posts/side-ios/index.html#what-is-side-downloading",
    "title": "Âú® ios ‰∏ãËΩΩÁ¨¨‰∏âÊñπÂ∫îÁî®",
    "section": "What is side-downloading",
    "text": "What is side-downloading\niosÁ≥ªÁªü‰∏çÂÉèÂÆâÂçìÁ≥ªÁªüÔºåÂè™ËÉΩÂú®iOS storeÈáåÈù¢‰∏ãËΩΩapp„ÄÇ‰∏∫‰∫ÜÊâìÁ†¥ËøôÁÇπÔºåÊúâ‰∏§ÁßçÊñπÊ≥ïÔºöË∂äÁã±(jail breaking)Êàñ‰ΩøÁî®side-downloading„ÄÇÊú¨Êñá‰ªãÁªçÂêéËÄÖ„ÄÇ\nSide-downloading ÊåáÈÄöËøá‰∏çË∂äÁã±ÁöÑÊñπÊ≥ïÂ∞Ü iOS Â∫îÁî®Á®ãÂ∫èÁõ¥Êé•ÂÆâË£ÖÂà∞ Apple ËÆæÂ§á‰∏äÔºåËÄå‰∏çÈúÄË¶ÅÈÄöËøá App Store„ÄÇÊúâÂæàÂ§öÂ∑•ÂÖ∑ÂèØ‰ª•ÂÆûÁé∞ËøôÁÇπÔºåÂÖ∑‰ΩìÂèÇËÄÉlist of tools„ÄÇ\nÂÖ∂‰∏≠ Scarlet Âíå Signulous ÁöÑÊñπÊ≥ïÊàëÊ≤°ËØïËøáÔºåÂè¶Â§ñ‰∏âÁßç AltStore ÈúÄË¶Å‰Ω†ÊâãÊú∫ÊòØÊ¨ßÁâàÁöÑ„ÄÅappÂú∞Âå∫ÊòØÊ¨ßÊ¥≤„ÄÅ‰Ω†‰∫∫‰πüË¶ÅÂú®Ê¨ßÊ¥≤ÔºåÊâÄ‰ª•Ê≤°Êàè„ÄÇÊúÄÂêé‰∏§Áßç Sideloadly Âíå SidestoreÔºåÂêéËÄÖ‰∏ãËΩΩËΩØ‰ª∂ÈúÄË¶ÅËøûÁîµËÑëÔºåÂπ∂‰∏î‰∏ÄËà¨ side-downloading ÁöÑËΩØ‰ª∂ÊòØË¶Å‚ÄúÁª≠Á∫¶(renew)‚ÄùÁöÑÔºå‰∏ÄËà¨ÊØèÂë®ÈÉΩË¶ÅÔºåËÄå‰∏î Sideloadly ËøôÁßçÊñπÊ≥ïËøòË¶ÅËøûÁîµËÑë renewÔºå‰∏çÊñπ‰æø„ÄÇÊâÄ‰ª•Êàë‰ª¨ÈááÁî®ÊúÄÂêé‰∏ÄÁßç SideStoreÔºàÂè™ÈúÄË¶ÅÁ¨¨‰∏ÄÊ¨°ÁöÑÊó∂ÂÄôËøûÁîµËÑëÔºåÂêéÈù¢Âú®ÊâãÊú∫‰∏ä‰∏ãËΩΩÂíå renewÔºâ„ÄÇÂΩìÁÑ∂Êàë‰ª¨‰πü‰ºöÁî® sideloadly ‰∏ãÂá†‰∏™ÁúãÁúãÔºåÊØïÁ´üËøôÁßçÊØîËæÉÁÆÄÂçï„ÄÇ"
  },
  {
    "objectID": "posts/side-ios/index.html#sideloadly",
    "href": "posts/side-ios/index.html#sideloadly",
    "title": "Âú® ios ‰∏ãËΩΩÁ¨¨‰∏âÊñπÂ∫îÁî®",
    "section": "Sideloadly",
    "text": "Sideloadly\nÂú® windows Êàñ mac ‰∏ä‰∏ãËΩΩÂÆâË£Ö sideloadlyÔºåÂõæÊ†áÂ¶Ç‰∏ãÔºö\n\nÔºàÂèØËÉΩË¶ÅÂú® settings ‰∏≠ÊéàÊùÉËøô‰∏™Â∫îÁî®Ôºâ\nËøô‰∏™Âè™ÊòØ‰∏™Â∞ÜËΩØ‰ª∂‰∏ãËΩΩÂà∞ iPhone ‰∏≠ÁöÑÂ∑•ÂÖ∑ÔºåËÄåËΩØ‰ª∂Âú®Âì™ÈáåËé∑ÂèñÂë¢ÔºüÊàë‰ª¨ÈúÄË¶Å .ipa ÂêéÁºÄÁöÑÊñá‰ª∂ÔºåÂèØ‰ª•Âú®ËøôÈáåÊêúÁ¥¢‰Ω†Ë¶ÅÁöÑËΩØ‰ª∂ÔºåÂ¶ÇÊûúÊ≤°ÊúâÂ∞±Âú®google‰∏äÊêúÔºåÊúÄÂ•ΩÊ≥®ÊÑè‰∏ãÂÆâÂÖ®ÊÄßÈóÆÈ¢ò„ÄÇ\nÁÑ∂ÂêéÊâìÂºÄ sideloadly, Â∑¶‰æßÈÄâÊã©‰Ω†ÁöÑ .ipa Êñá‰ª∂ÔºåiDeviceÈÄâÊã©‰Ω†ÁöÑ iPhoneÔºàË¶ÅÁî®Á∫øÂ∞ÜÊâãÊú∫ËøûÂà∞macÔºâÔºåËæìÂÖ•‰Ω†ÁöÑApple idÔºàË¶ÅËÆ∞‰ΩèËøô‰∏™IDÔºå‰ª•ÂêéÈÉΩÁî®Ëøô‰∏™ÔºâÂíåÂØÜÁ†ÅÔºåÁÇπÂáªstart„ÄÇÔºàstart Â∑¶ËæπÈÇ£‰∏™ÊåâÈíÆÊòØÁî®Êù• renew ÁöÑÔºåÂ∞ÜÊù•ËΩØ‰ª∂ËøáÊúüÁöÑÊó∂ÂÄôÂ∞±Áî®ÂêåÊ†∑ÁöÑÊìç‰ΩúÊù• renewÔºâ"
  },
  {
    "objectID": "posts/side-ios/index.html#sidestore",
    "href": "posts/side-ios/index.html#sidestore",
    "title": "Âú® ios ‰∏ãËΩΩÁ¨¨‰∏âÊñπÂ∫îÁî®",
    "section": "Sidestore",
    "text": "Sidestore\nÁõ¥Êé•ÊåâÁÖßËøôÈáåÁöÑÊåáÁ§∫‰∏ãËΩΩÂÆâË£ÖÂç≥ÂèØÔºösidestore„ÄÇ\nÂÖ∂‰∏≠Êúâ‰∏ÄÊ≠•Ë¶Å‰∫ßÁîü‰∏Ä‰∏™ÈÖçÂØπÊñá‰ª∂ÔºåËÆ∞ÂæóË¶ÅÂ∞ÜmacËøû‰∏äÊâãÊú∫ÂêéÂÜçËøêË°å„ÄÇÂ¶ÇÊûúmac‰∏ä‰∏ÄÁõ¥ËøêË°å‰∏çÂá∫Êù•ÔºåÂú® terminal ÂΩìÂâçÊñá‰ª∂Â§π‰∏≠ËæìÂÖ•Ôºö\nsudo ./jitterbugpair\nËæìÂÖ•ÂØÜÁ†ÅÂç≥ÂèØÁîüÊàê"
  },
  {
    "objectID": "posts/least-squares-as-projection/index.html",
    "href": "posts/least-squares-as-projection/index.html",
    "title": "Least Squares as Projection ÊúÄÂ∞è‰∫å‰πòÊ≥ïÁöÑÊäïÂΩ±Ëß£Èáä",
    "section": "",
    "text": "The goal is to find the linear model \\(y = \\beta_0 + \\beta_1 x\\) such that the sum of squared errors between the predicted values and the actual data is minimized."
  },
  {
    "objectID": "posts/least-squares-as-projection/index.html#introduction",
    "href": "posts/least-squares-as-projection/index.html#introduction",
    "title": "Least Squares as Projection ÊúÄÂ∞è‰∫å‰πòÊ≥ïÁöÑÊäïÂΩ±Ëß£Èáä",
    "section": "",
    "text": "The goal is to find the linear model \\(y = \\beta_0 + \\beta_1 x\\) such that the sum of squared errors between the predicted values and the actual data is minimized."
  },
  {
    "objectID": "posts/least-squares-as-projection/index.html#linear-model",
    "href": "posts/least-squares-as-projection/index.html#linear-model",
    "title": "Least Squares as Projection ÊúÄÂ∞è‰∫å‰πòÊ≥ïÁöÑÊäïÂΩ±Ëß£Èáä",
    "section": "Linear Model",
    "text": "Linear Model\nThe form of the linear model is:\n\\[\ny_i = \\beta_0 + \\beta_1 x_i + \\epsilon_i\n\\]\nwhere \\(y_i\\) is the observed value, \\(x_i\\) is the independent variable, \\(\\beta_0\\) is the intercept, \\(\\beta_1\\) is the slope, and \\(\\epsilon_i\\) is the error term.\nWe wish to find \\(\\beta_0\\) and \\(\\beta_1\\) such that the predicted values \\(\\hat{y}_i = \\beta_0 + \\beta_1 x_i\\) minimize the sum of squared errors between \\(\\hat{y}_i\\) and the observed values \\(y_i\\)."
  },
  {
    "objectID": "posts/least-squares-as-projection/index.html#design-matrix-and-observation-vector",
    "href": "posts/least-squares-as-projection/index.html#design-matrix-and-observation-vector",
    "title": "Least Squares as Projection ÊúÄÂ∞è‰∫å‰πòÊ≥ïÁöÑÊäïÂΩ±Ëß£Èáä",
    "section": "Design Matrix and Observation Vector",
    "text": "Design Matrix and Observation Vector\nTo make the problem more convenient, we represent it using vectors and matrices.\n\nDesign Matrix\nDefine the design matrix \\(\\mathbf{X}\\) as:\n\\[\n\\mathbf{X} = \\begin{bmatrix}\n1 & 1 \\\\\n1 & 2 \\\\\n1 & 3 \\\\\n1 & 4\n\\end{bmatrix}\n\\]\nThe first column contains only 1s, representing the constant term \\(\\beta_0\\), and the second column contains the values of the independent variable \\(x_i\\).\n\n\nObservation Vector\nDefine the observation vector \\(\\mathbf{y}\\) as:\n\\[\n\\mathbf{y} = \\begin{bmatrix}\n2 \\\\\n3 \\\\\n5 \\\\\n7\n\\end{bmatrix}\n\\]\nThis vector contains all the observed values \\(y_i\\).\n\n\nParameter Vector\nDefine the parameter vector \\(\\boldsymbol{\\beta} = \\begin{bmatrix} \\beta_0 \\\\ \\beta_1 \\end{bmatrix}\\)."
  },
  {
    "objectID": "posts/least-squares-as-projection/index.html#sum-of-squared-errors-objective-function",
    "href": "posts/least-squares-as-projection/index.html#sum-of-squared-errors-objective-function",
    "title": "Least Squares as Projection ÊúÄÂ∞è‰∫å‰πòÊ≥ïÁöÑÊäïÂΩ±Ëß£Èáä",
    "section": "Sum of Squared Errors Objective Function",
    "text": "Sum of Squared Errors Objective Function\nIn regression, our goal is to find the parameters \\(\\boldsymbol{\\beta}\\) such that the predicted values \\(\\hat{\\mathbf{y}} = \\mathbf{X} \\boldsymbol{\\beta}\\) are as close as possible to the observed values \\(\\mathbf{y}\\), by minimizing the sum of squared errors (SSE):\n\\[\nS(\\beta_0, \\beta_1) = \\sum_{i=1}^n (y_i - \\hat{y}_i)^2 = (\\mathbf{y} - \\mathbf{X} \\boldsymbol{\\beta})^T (\\mathbf{y} - \\mathbf{X} \\boldsymbol{\\beta})\n\\]"
  },
  {
    "objectID": "posts/least-squares-as-projection/index.html#deriving-the-normal-equation",
    "href": "posts/least-squares-as-projection/index.html#deriving-the-normal-equation",
    "title": "Least Squares as Projection ÊúÄÂ∞è‰∫å‰πòÊ≥ïÁöÑÊäïÂΩ±Ëß£Èáä",
    "section": "Deriving the Normal Equation",
    "text": "Deriving the Normal Equation\nThe key idea of least squares is to find \\(\\boldsymbol{\\beta}\\) such that the residual \\(\\mathbf{y} - \\mathbf{X} \\boldsymbol{\\beta}\\) is minimized. Geometrically, this means that the residual should be orthogonal to the column space of the design matrix \\(\\mathbf{X}\\), which leads to the normal equation:\n\\[\n\\mathbf{X}^T (\\mathbf{y} - \\mathbf{X} \\hat{\\boldsymbol{\\beta}}) = 0\n\\]\nExpanding this:\n\\[\n\\mathbf{X}^T \\mathbf{y} = \\mathbf{X}^T \\mathbf{X} \\hat{\\boldsymbol{\\beta}}\n\\]\nThis is the normal equation, which can be solved to find the least squares estimate \\(\\hat{\\boldsymbol{\\beta}}\\)."
  },
  {
    "objectID": "posts/least-squares-as-projection/index.html#solving-the-normal-equation",
    "href": "posts/least-squares-as-projection/index.html#solving-the-normal-equation",
    "title": "Least Squares as Projection ÊúÄÂ∞è‰∫å‰πòÊ≥ïÁöÑÊäïÂΩ±Ëß£Èáä",
    "section": "Solving the Normal Equation",
    "text": "Solving the Normal Equation\nNow, let‚Äôs compute the parts of the normal equation.\n\nCompute \\(\\mathbf{X}^T \\mathbf{X}\\)\n\\[\n\\mathbf{X}^T \\mathbf{X} = \\begin{bmatrix}\n1 & 1 & 1 & 1 \\\\\n1 & 2 & 3 & 4\n\\end{bmatrix}\n\\begin{bmatrix}\n1 & 1 \\\\\n1 & 2 \\\\\n1 & 3 \\\\\n1 & 4\n\\end{bmatrix}\n= \\begin{bmatrix}\n4 & 10 \\\\\n10 & 30\n\\end{bmatrix}\n\\]\n\n\nCompute \\(\\mathbf{X}^T \\mathbf{y}\\)\n\\[\n\\mathbf{X}^T \\mathbf{y} = \\begin{bmatrix}\n1 & 1 & 1 & 1 \\\\\n1 & 2 & 3 & 4\n\\end{bmatrix}\n\\begin{bmatrix}\n2 \\\\\n3 \\\\\n5 \\\\\n7\n\\end{bmatrix}\n= \\begin{bmatrix}\n17 \\\\\n50\n\\end{bmatrix}\n\\]\n\n\nSolve the Normal Equation\nNow we solve the normal equation:\n\\[\n\\begin{bmatrix}\n4 & 10 \\\\\n10 & 30\n\\end{bmatrix} \\hat{\\boldsymbol{\\beta}} = \\begin{bmatrix}\n17 \\\\\n50\n\\end{bmatrix}\n\\]\nTo solve this, we first compute the inverse of \\(\\mathbf{X}^T \\mathbf{X}\\):\n\\[\n(\\mathbf{X}^T \\mathbf{X})^{-1} = \\frac{1}{(4)(30) - (10)(10)} \\begin{bmatrix}\n30 & -10 \\\\\n-10 & 4\n\\end{bmatrix} = \\frac{1}{20} \\begin{bmatrix}\n30 & -10 \\\\\n-10 & 4\n\\end{bmatrix}\n\\]\nNext, we compute \\(\\hat{\\boldsymbol{\\beta}}\\):\n\\[\n\\hat{\\boldsymbol{\\beta}} = (\\mathbf{X}^T \\mathbf{X})^{-1} \\mathbf{X}^T \\mathbf{y}\n\\]\n\\[\n\\hat{\\boldsymbol{\\beta}} = \\frac{1}{20} \\begin{bmatrix}\n30 & -10 \\\\\n-10 & 4\n\\end{bmatrix}\n\\begin{bmatrix}\n17 \\\\\n50\n\\end{bmatrix}\n= \\frac{1}{20} \\begin{bmatrix}\n(30)(17) + (-10)(50) \\\\\n(-10)(17) + (4)(50)\n\\end{bmatrix}\n\\]\n\\[\n\\hat{\\boldsymbol{\\beta}} = \\frac{1}{20} \\begin{bmatrix}\n510 - 500 \\\\\n-170 + 200\n\\end{bmatrix}\n= \\frac{1}{20} \\begin{bmatrix}\n10 \\\\\n30\n\\end{bmatrix}\n= \\begin{bmatrix}\n0.5 \\\\\n1.5\n\\end{bmatrix}\n\\]"
  },
  {
    "objectID": "posts/least-squares-as-projection/index.html#least-squares-estimate",
    "href": "posts/least-squares-as-projection/index.html#least-squares-estimate",
    "title": "Least Squares as Projection ÊúÄÂ∞è‰∫å‰πòÊ≥ïÁöÑÊäïÂΩ±Ëß£Èáä",
    "section": "Least Squares Estimate",
    "text": "Least Squares Estimate\nBy solving the normal equation, we find \\(\\hat{\\beta}_0 = 0.5\\) and \\(\\hat{\\beta}_1 = 1.5\\). Thus, the regression model is:\n\\[\n\\hat{y} = 0.5 + 1.5x\n\\]"
  },
  {
    "objectID": "posts/least-squares-as-projection/index.html#conclusion",
    "href": "posts/least-squares-as-projection/index.html#conclusion",
    "title": "Least Squares as Projection ÊúÄÂ∞è‰∫å‰πòÊ≥ïÁöÑÊäïÂΩ±Ëß£Èáä",
    "section": "Conclusion",
    "text": "Conclusion\nUsing the projection approach, we see that the least squares estimate is the projection of the observation vector \\(\\mathbf{y}\\) onto the space spanned by the columns of the design matrix \\(\\mathbf{X}\\). By solving the normal equation, we found the parameters \\(\\hat{\\beta}_0 = 0.5\\) and \\(\\hat{\\beta}_1 = 1.5\\), which minimize the sum of squared errors."
  },
  {
    "objectID": "posts/digital-analysis-mac/index.html",
    "href": "posts/digital-analysis-mac/index.html",
    "title": "RTL Analysis on MacOS under 300MB",
    "section": "",
    "text": "CLAIM: This article synthesizes conclusions and methods from multiple websites and is not pure original. Êú¨ÊñáÁªºÂêà‰∫ÜÂ§ö‰∏™ÁΩëÁ´ôÁöÑÁªìËÆ∫ÂíåÊñπÊ≥ïÔºåÂπ∂ÈùûÂéüÂàõ„ÄÇ\nYou may find these websites useful:\n\nWorkflow for FPGA development\nSome open-source tools\nIceStudio for M2 Mac\nFPGA Toolchain\nVHDL compile chain on MacOS\n\n\n\n\n\nYou need these:\n\ngtkwave: main RTL wave creator\nIcarus Verilog, and this manual\nYoSYS: .v to .json\nGHDL: compile, link and simulation tool for VHDL\nnetlistsvg: .json to .svg\n\nNot nessasarily required:\n\nPulseview: Logic Analyzer (Not required though)\nDigital: Visual simulation\n\nUseful vscode plugins:\n\nVerilog Support: vscode verilog language highlighter\nWavetrace: A nice vscode plugin to replace gtkwave"
  },
  {
    "objectID": "posts/digital-analysis-mac/index.html#intro-and-overview",
    "href": "posts/digital-analysis-mac/index.html#intro-and-overview",
    "title": "RTL Analysis on MacOS under 300MB",
    "section": "",
    "text": "CLAIM: This article synthesizes conclusions and methods from multiple websites and is not pure original. Êú¨ÊñáÁªºÂêà‰∫ÜÂ§ö‰∏™ÁΩëÁ´ôÁöÑÁªìËÆ∫ÂíåÊñπÊ≥ïÔºåÂπ∂ÈùûÂéüÂàõ„ÄÇ\nYou may find these websites useful:\n\nWorkflow for FPGA development\nSome open-source tools\nIceStudio for M2 Mac\nFPGA Toolchain\nVHDL compile chain on MacOS\n\n\n\n\n\nYou need these:\n\ngtkwave: main RTL wave creator\nIcarus Verilog, and this manual\nYoSYS: .v to .json\nGHDL: compile, link and simulation tool for VHDL\nnetlistsvg: .json to .svg\n\nNot nessasarily required:\n\nPulseview: Logic Analyzer (Not required though)\nDigital: Visual simulation\n\nUseful vscode plugins:\n\nVerilog Support: vscode verilog language highlighter\nWavetrace: A nice vscode plugin to replace gtkwave"
  },
  {
    "objectID": "posts/digital-analysis-mac/index.html#first-project-in-verilog",
    "href": "posts/digital-analysis-mac/index.html#first-project-in-verilog",
    "title": "RTL Analysis on MacOS under 300MB",
    "section": "First Project in Verilog",
    "text": "First Project in Verilog\n\nInstall Icarus Verilog Compiler\nbrew install icarus-verilog\n\n\nCompilation and Simulation\n\nCreate new folder called Verilog, then create two test files named GatedDLatch.v and GatedDLatch_tb.v. The former is the description file of the circuit, the latter is for testbench. And write the following contents respectively:\n// in GatedDLatch.v\nmodule GatedDLatch (Data, WE, Out, OutBar);\n\n    input Data;\n    input WE;\n\n    output Out;\n    output OutBar;\n\n    // component name(output, input1, input2)\n    wire S;\n    wire R;\n    wire Dbar;\n    nand g1(S, Data, WE);\n    not g2(Dbar, Data);\n    nand g3(R, WE, Dbar);\n    nand g4(Out, S, OutBar);\n    nand g5(OutBar, R, Out);\n    \n\nendmodule\nand\n// in GatedDLatch_tb.v\n`timescale 1ns / 1ns // simulation time, time precision = 1ns\n//Import the main code into the testbench\n`include \"GatedDLatch.v\"\n\nmodule GatedDLatch_tb;\n//Inputs as registers\nreg Data;\nreg WE;\n\n//Outputs as wires\nwire Out;\nwire OutBar;\n\n//Initialisation\nGatedDLatch uut(Data, WE, Out, OutBar);\n\ninitial begin\n    //Name of the graph file that gets generated after we run\n    $dumpfile(\"GatedDLatch_tb.vcd\");\n    $dumpvars(0,GatedDLatch_tb);\n\n    Data = 0;\n    WE = 0;\n    #10;\n\n    Data = 1;\n    #4;\n    WE = 1;\n    #2;\n    WE = 0;\n    #4;\n\n    Data = 0;\n    #4;\n    WE = 1;\n    #2;\n    WE = 0;\n    #4;\n\n    $display(\"Test complete\");\nend\nendmodule\n\nRun this in the terminal:\niverilog -o GatedDLatch_tb.vvp GatedDLatch_tb.v\n\nUse vvp command to convert the binary temperary file GatedDLatch_tb.vvp to GatedDLatch_tb.vcd waveform file:\nvvp GatedDLatch_tb.vvp\n\nInstall Wavetrace in vscode to view the waveform:\n\n\n\nDisplay the waveform in vscode\n\n\n\nYou can also install gtkwave to view the waveform.\nbrew install gtkwave\ngtkwave GatedDLatch_tb.vcd\n\n\n\nBefore imported\n\n\n\nExpand GatedDLatch_tb list to display the waveform:\n\n\n\nDisplaying waveform\n\n\n\n\nSynthesis and Visualization\n\nWe can also visualize the circuit topology (called generating schematics). First, use YoSYS to convert the verilog code into gate-level netlist. Of course you should install the command line tool YoSYS:\nbrew install yosys\nyosys -V # Verify Yosys installation\n\nYoSYS will first convert the circuit structure description file GatedDLatch.v into a json file:\nyosys -p \"prep -top GatedDLatch; write_json GatedDLatch.json\" GatedDLatch.v\n\nThen we install another tool called netlistsvg:\n# Install Node.js (if not already installed)\nbrew install node\n\n# Install netlistsvg globally using npm\nnpm install -g netlistsvg\n\n# Verify netlistsvg installation\nnetlistsvg --version\n\nUsing the netlistsvg tool to convert GatedDLatch.json to GatedDLatch.svg:\nnetlistsvg GatedDLatch.json -o GatedDLatch.svg\n\nPreviewing GatedDLatch.svg will give you the circuit schematic:\n\n\n\nGatedDLatch.svg\n\n\n\n\nMakefile Work Flow\n\nThe entire workflow can be divided into two major independent parts:\n\n\nCompilation and Simulation:\n\niverilog (Compilation)\nvvp (Simulation)\n\nSynthesis and Circuit Structure Visualization:\n\nyosys (Synthesis)\nnetlistsvg (Visualization)\n\n\n\nWe use a Makefile to automate this process (ensure that Make and related components are installed): Create a Makefile file in the previously created Verilog folder and add the following content:\n# Description: Makefile for GatedDLatch\nCIRCUIT_STRUCT = GatedDLatch\n\n# Directories\nBUILD_DIR = build\n\n# Ensure the build directory exists\n$(BUILD_DIR):\n    mkdir -p $(BUILD_DIR)\n\n# Compilation: iverilog compilation\niverilog: $(CIRCUIT_STRUCT).v $(CIRCUIT_STRUCT)_tb.v | $(BUILD_DIR)\n    iverilog -o $(BUILD_DIR)/$(CIRCUIT_STRUCT)_tb.vvp $(CIRCUIT_STRUCT)_tb.v\n\n# Simulation: generate waveform (.vcd)\nvvp: $(BUILD_DIR)/$(CIRCUIT_STRUCT)_tb.vvp\n    vvp $(BUILD_DIR)/$(CIRCUIT_STRUCT)_tb.vvp\n\n# Synthesis: generate circuit structure configuration file (.json)\nYOSYS: $(CIRCUIT_STRUCT).v | $(BUILD_DIR)\n    yosys -p \"prep -top $(CIRCUIT_STRUCT); write_json $(BUILD_DIR)/$(CIRCUIT_STRUCT).json\" $(CIRCUIT_STRUCT).v\n\n# Visualization: generate human readable (.svg) from .json\nNETLISTSVG: $(BUILD_DIR)/$(CIRCUIT_STRUCT).json | $(BUILD_DIR)\n    netlistsvg $(BUILD_DIR)/$(CIRCUIT_STRUCT).json -o $(BUILD_DIR)/$(CIRCUIT_STRUCT).svg\n\n# Schematic diagram only: Synthesis then Visualization\nschematic: YOSYS NETLISTSVG\n\n# Run all steps\nrun_all: iverilog vvp schematic\n\n# Clean build directory\nclean:\n    rm -rf $(BUILD_DIR)\n    rm -f $(CIRCUIT_STRUCT)_tb.vcd\n\nAfter modifying the files, simply execute:\nmake clean\nmake run_all\n\nThis will generate all the relevant files:\n\n\n\nProject File Structure"
  },
  {
    "objectID": "posts/digital-analysis-mac/index.html#first-project-in-vhdl",
    "href": "posts/digital-analysis-mac/index.html#first-project-in-vhdl",
    "title": "RTL Analysis on MacOS under 300MB",
    "section": "First Project in VHDL",
    "text": "First Project in VHDL\n\nInstall GHDL Compiler\n\nSimilar to Verilog, VHDL is also a hardware description language. Compiling it requires another tool: GHDL. Installing it on macOS can be tricky. The following steps have been tested on an M2 Mac (as of 2024-09-01):\n\nInstall vhdl using brew:\nbrew install vhdl\n\nvhdl has two versions: LLVM and mcode. The LLVM version has some issues on macOS, and the brew-installed version uses LLVM, so we manually download the mcode version from here. I downloaded ghdl-macos-11-mcode.tgz.\nExtract it by double-clicking, and you will get three files:\n\n\n\nGHDL-mcode package\n\n\n\nCopy and paste these three files to the following path: /opt/homebrew/Caskroom/ghdl/4.1.0:\n\n\n\nCopy and Paste\n\n\nIn the terminal, type:\nghdl --version\n\nIf you encounter security prompts, go to System Settings &gt; Privacy & Security to allow access:\n\n\n\nAllow Access in Privacy & Security\n\n\n\n\nCompilation, Linking and Simulation\n\nUnlike Verilog, VHDL requires an additional Linking step, which connects the component declarations with their implementation files (testbench). Why doesn‚Äôt Verilog require this? Because the testbench file in Verilog includes the declaration contents (include \"GatedDLatch.v\"), so it links automatically.\n\nIn Verilog, we used two separate tools (iverilog and vvp) for compilation and simulation. However, for VHDL, we only need one tool: GHDL.\n\nCreate a new folder VHDLDemo, and within it, create two files: demo.vhdl and demo_tb.vhdl. The former describes the circuit structure, and the latter serves as the testbench file (you can also use .vhd as the suffix). Add the following content to the respective files:\nlibrary IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\n\nentity demo is\n    port (\n        A : in  STD_LOGIC;\n        B : in  STD_LOGIC;\n        O : out STD_LOGIC\n    );\nend demo;\n\narchitecture Behavioral of demo is\nbegin\n    O &lt;= not (A and B); -- NAND gate\nend Behavioral;\nand\nlibrary IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\n\nentity demo_tb is\nend demo_tb;\n\narchitecture Behavioral of demo_tb is\n    signal A : STD_LOGIC := '0';\n    signal B : STD_LOGIC := '0';\n    signal O : STD_LOGIC;\n\n    -- Instantiate the unit under test (UUT)\n    component demo\n        port (\n            A : in  STD_LOGIC;\n            B : in  STD_LOGIC;\n            O : out STD_LOGIC\n        );\n    end component;\nbegin\n    UUT: demo port map (\n        A =&gt; A,\n        B =&gt; B,\n        O =&gt; O\n    );\n\n    -- Test process\n    process\n    begin\n        -- Test case 1: A = 0, B = 0\n        A &lt;= '0';\n        B &lt;= '0';\n        wait for 10 ns;\n        \n        -- Test case 2: A = 0, B = 1\n        A &lt;= '0';\n        B &lt;= '1';\n        wait for 10 ns;\n\n        -- Test case 3: A = 1, B = 0\n        A &lt;= '1';\n        B &lt;= '0';\n        wait for 10 ns;\n\n        -- Test case 4: A = 1, B = 1\n        A &lt;= '1';\n        B &lt;= '1';\n        wait for 10 ns;\n\n        -- End of simulation\n        wait;\n    end process;\nend Behavioral;\n\nCreate a Makefile to automate the process:\n# Description: Makefile for VHDLDemo\nCIRCUIT = demo\nTB = demo_tb\nBUILD_DIR = build\n\n# Ensure the build directory exists\n$(BUILD_DIR):\n    mkdir -p $(BUILD_DIR)\n\n# Compilation: compile the design and testbench\nghdl_compile: $(BUILD_DIR)\n    ghdl -a --workdir=$(BUILD_DIR) $(CIRCUIT).vhdl\n    ghdl -a --workdir=$(BUILD_DIR) $(TB).vhdl\n\n# Linking: Elaborate the design and testbench\nghdl_elab: ghdl_compile\n    ghdl -e --workdir=$(BUILD_DIR) $(TB)\n\n# Simulation: simulate the testbench\nghdl_simulate: ghdl_elab\n    ghdl -r --workdir=$(BUILD_DIR) $(TB) --vcd=$(BUILD_DIR)/$(TB).vcd\n\n### These cannot work for now##############################################\n# # Synthesis: generate circuit structure configuration file (.json), you should have ghdl plugin installed for yosys, but I have error: \"ERROR: No such command: ghdl\" or \"dyld[5264]: missing symbol called\", possible solution could be to install yosys from source, but not sure\n# YOSYS: $(CIRCUIT).vhdl | $(BUILD_DIR)\n#   yosys -p \"ghdl $(CIRCUIT); prep -top $(CIRCUIT); write_json -compat-int $(BUILD_DIR)/$(CIRCUIT).json\" $(CIRCUIT).vhdl\n\n# # Visualization: generate human readable (.svg) from .json\n# NETLISTSVG: $(BUILD_DIR)/$(CIRCUIT).json  | $(BUILD_DIR)\n#   netlistsvg $(BUILD_DIR)/$(CIRCUIT).json -o $(BUILD_DIR)/$(CIRCUIT).svg\n\n# # Schematic diagram only: Synthesis then Visualization\n# schematic: YOSYS NETLISTSVG\n\n# # Run all steps\n# run_all: ghdl_compile ghdl_elab ghdl_simulate YOSYS NETLISTSVG\n### These cannot work for now##############################################\n\n# Run compilation, linking and simulation\nrun_cls: ghdl_compile ghdl_elab ghdl_simulate\n\n# Clean build directory\nclean:\n    rm -rf $(BUILD_DIR)\n    rm -f $(TB)\n\n# Experiment: Run testbench without the design file\nrun_tb_only: $(BUILD_DIR)\n    ghdl -a --workdir=$(BUILD_DIR) $(TB).vhdl\n    ghdl -r --workdir=$(BUILD_DIR) $(TB) --vcd=$(BUILD_DIR)/$(TB)_no_design.vcd\n\nThe running process is very clear. In the command line, execute:\nmake clean\nmake run_cls\n\nThis will complete the process.\n\nIf you want to see what happens if you skip compiling and linking the design file (demo.vhdl), run:\nmake clean # Cannot omitted!\nmake run_tb_only\n\nYou can compare the two .vcd files generated in VSCode or using GTKWave; they are different as expected.\n\n\nNo Synthesis and Visualization Plan\n\nNote that this Makefile does not include steps to generate a schematic diagram because yosys requires a ghdl plugin. Currently, the integration is not very stable. You can refer to ghdl-yosys-plugin and building-ghdl for more details. However, the suggested methods have been tested on M2 Mac and result in errors:\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2024  Claire Xenia Wolf &lt;claire@yosyshq.com&gt;         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.44 (git sha1 80ba43d26, clang++ 15.0.0 -fPIC -O3)\n\n-- Running command `ghdl demo_tb.vhdl -e demo_tb; prep -top demo_tb; write_json demo.json' --\n\n1. Executing GHDL.\ndyld[5264]: missing symbol called\nzsh: abort      yosys -m ghdl -p\n\nThis issue has also been mentioned in the Issues section of ghdl-yosys-plugin, but there is no solution yet.\n\nPossible solutions might include compiling and installing yosys from source, ensuring the correct versions of yosys and ghdl, or checking if any component of the FPGA Toolchain is missing. Alternatively, you could try converting VHDL to Verilog using some tool (like GPT) and then synthesizing the schematics."
  },
  {
    "objectID": "posts/em1/index.html",
    "href": "posts/em1/index.html",
    "title": "EM Chapter I: Maxwell‚Äôs First Equation",
    "section": "",
    "text": "Changing the mindset from forces to fields.\nMaxwell‚Äôs First Equation = Inverse Square + Superposition"
  },
  {
    "objectID": "posts/em1/index.html#takeaway",
    "href": "posts/em1/index.html#takeaway",
    "title": "EM Chapter I: Maxwell‚Äôs First Equation",
    "section": "",
    "text": "Changing the mindset from forces to fields.\nMaxwell‚Äôs First Equation = Inverse Square + Superposition"
  },
  {
    "objectID": "posts/em1/index.html#welcome",
    "href": "posts/em1/index.html#welcome",
    "title": "EM Chapter I: Maxwell‚Äôs First Equation",
    "section": "Welcome!",
    "text": "Welcome!\nThis is the first chapter of my electromagnetics series. I will introduce to you the theory of electromagnetism through this series, not in the order of history, but in the order of a self-contained logic that satisfies people. The reason I did this is that history is too complicated, confusing and sometimes even wrong. One would not fully understand the trajactory of any subject (geometry, Newton‚Äôs law, General relativity, etc) without experiencing it. So I would NOT recommend you go through the tedious history of any subject but develop your own logic-complete explanation of it after reading tons of wikipedia and stackexchange, in other words, that explanation should make sense in the history in another parallel universe!\nYou will understand the first one of the famous Maxwell‚Äôs Equations in this blog:\n\n\\begin{aligned}\n    \\mathbf{\\nabla} \\cdot \\mathbf{E} &= \\frac{\\rho}{\\varepsilon_0} \\quad &\\text{(Gauss's law)} \\\\\n    \\mathbf{\\nabla} \\cdot \\mathbf{B} &= 0 \\quad &\\text{(Gauss's law for magnetism)} \\\\\n    \\mathbf{\\nabla} \\times \\mathbf{E} &= -\\frac{\\partial \\mathbf{B}}{\\partial t} \\quad &\\text{(Faraday's law)} \\\\\n    \\mathbf{\\nabla} \\times \\mathbf{B} &= \\mu_0 \\mathbf{J} + \\mu_0 \\varepsilon_0 \\frac{\\partial \\mathbf{E}}{\\partial t} \\quad &\\text{(Amp√®re's law)}\n\\end{aligned}"
  },
  {
    "objectID": "posts/em1/index.html#physics-world-to-math-world",
    "href": "posts/em1/index.html#physics-world-to-math-world",
    "title": "EM Chapter I: Maxwell‚Äôs First Equation",
    "section": "Physics World to Math World",
    "text": "Physics World to Math World\nPhysics originates from observations in the real world. If you keep an eye on it, you could discover the following phenomena yourself:\n\nThe force between two charges is proportional to their charge, and inversely proportional to their distance, squared.\nNo isolated ‚Äúmagnetic charges‚Äù found in nature.\nChanging magnetic flux leads to current in a circuit!\nTwo parallel wires attract or repel each other when current is applied!\n\nThese four observations leads to the four equations by Maxwell."
  },
  {
    "objectID": "posts/em1/index.html#integral-form-of-maxwells-first-equation",
    "href": "posts/em1/index.html#integral-form-of-maxwells-first-equation",
    "title": "EM Chapter I: Maxwell‚Äôs First Equation",
    "section": "Integral Form of Maxwell‚Äôs First Equation",
    "text": "Integral Form of Maxwell‚Äôs First Equation\n\nInverse Square Law\nAccording to observation 1, we could write1: \nF \\propto \\frac{Qq}{r^2},\n or in an equation: \n\\boxed{\nF = k \\frac{Qq}{r^2},\n}\n\n1¬†Non-bold-face letters (F) are scalars, bold-face letters (\\mathbf{F}) are vectors.2¬†The unit of charge (Coulomb) is defined in the following way (The reason Ampere are defined first is because Ampere happens to be one of the base unit of SI): - Current: Ampere (I: A): First we define Ampere (surprise!) to be the intensity of current on two ideal wires that are 1 metre apart and produces a force of 2 \\times 10^{-7} N between them (1N is defined to be the force that makes an object of mass 1kg moves at the acceleration of 1\\text{m}/\\text{s}^2) - Charge: Coulomb (Q: C): Then we define Coulomb to be the amount of charge the that passes through a point with a current of 1A over 1 second.where k is a constant, Q and q are the amount of charge2 on two small objects, r is their distance.\n\n\nConservative Property\nLet‚Äôs consider the work done when we fix Q and gradually move q in a certain path. Since the force from Q to q is always radially from Q, it turns out that the work done only depends on the initial and final position of q regardless of the moving process in between! We say a force like this Conservative3. We would like to think that there is a number U attached at every spatial point around Q such that the the work done from point A and B is just that U(A)-U(B)4, i.e., \nW_{AB} =: U(A) - U(B).\n\n3¬†It‚Äôs worth noting that conservativity has nothing to do with the inverse square property. The potential energy of hypothetical ‚Äúinverse force‚Äù and ‚Äúinverse cubic force‚Äù are: \nU_{\\frac{1}{r}} = -kQq \\ln r,\n and \nU_{\\frac{1}{r^3}} = \\frac{kQq}{2} \\frac{1}{r^2}.\n4¬†Why not U(B)-U(A)? Because we want the quantity U also indicates the tendancy that q would move. More likely to move, U should be larger.\n\n\n\nU(A) is expected to be larger than U(B)\n\n\n5¬†Actually, should be U(r) = -k \\frac{Q}{r} + \\operatorname{const}. But when r \\to \\infty, we expect U to be 0 because q do not have the ability to do work.\nU(r) is called the potential energy at r. We claim5 that \n\\boxed{\nU(r) = -k \\frac{Qq}{r},\n}\n because \nW_{AB}\n= \\int_{A \\to B} \\mathbf{F} \\cdot \\mathbf{\\mathrm{d}r}\n= \\int_{r_0}^{r_1} k \\frac{Qq}{r^2} \\mathrm{d}r\n= -k \\frac{Qq}{r_1} - k \\frac{Qq}{r_0}\n=: U(A) - U(B).\n\nTherefore, the work done is just the difference of U with a negative sign: \nW_{AB} = - \\Delta U.\n\nWe also know that\n\n\\mathrm{d} W_{AB} = \\mathbf{F} \\cdot \\mathrm{d} \\mathbf{l} = F \\cdot \\mathrm{d} l_\\parallel,\n where \\mathrm{d} \\mathbf{l} is a small displacement and \\mathrm{d} l_\\parallel is the length of the projection of that small displacement onto the direction of \\mathbf{F}, i.e., the direction of \\mathbf{\\nabla} U, reversed. Hence, \nF = \\frac{\\mathrm{d} W_{AB}}{\\mathrm{d} l_\\parallel} = - \\frac{\\mathrm{d} U}{\\mathrm{d} l_\\parallel}.\n\nIn vector notation, \n\\boxed{\n\\mathbf{F} = - \\mathbf{\\nabla} U.\n}\n\\tag{1}\n\n\nGet Rid of Test-charge\nWhen q is far smaller than Q, it is called a test charge, which is used to ‚Äútest‚Äù the effect of Q to its surroundings and minimize other interference. It is naturally to get rid of q and define a quantity E that only depends on Q, we expect that E satisfies: \n\\mathbf{F} =: \\mathbf{E} q,\n where E obviously equal to: \n\\boxed{\nE = k \\frac{Q}{r^2}.\n}\n\nWe call E the electric field generated by Q6.\n6¬†Since \\mathbf{E} is equivalent to force (just up to a constant), all properties of \\mathbf{E} is inherited from \\mathbf{F}, such as vector property, superposition, conservativity, etc.Therefore, Equation¬†1 could be written as: \n\\mathbf{E}q = - \\mathbf{\\nabla} U.\n\\tag{2}\nWe could also get rid of q in Equation¬†2 by defining a quantity V called the (Electric) potential generated by Q: \n\\boxed{\nU := Vq,\n}\n so we have \n\\mathbf{E}q = -\\mathbf{\\nabla} V q\n \n\\implies\n\\boxed{\n\\mathbf{E} = - \\mathbf{\\nabla} V.\n}\n\\tag{3}\nYou can compare Equation¬†1 and Equation¬†3, the latter is test-charge-free version of the former!\n\n\n\n\n\n\nTip¬†1: The spirit of fields\n\n\n\nThis mindset from force to field is extremely important! ‚ÄúField‚Äù originates from ‚Äúforce‚Äù but later evolves independently from it, as you will see. Thinking in terms of ‚Äúfields‚Äù rather than ‚Äúforces‚Äù is a key factor that distinguishes beginners from experts. Now you have evolved to the second level ‚Äì make ‚Äúfields‚Äù be your second nature!\n\n\n\n\nAn Interesting Question\nHow to know how many charges inside some closed region?\n\n\n\n\n\nThe question\n\n\n\nProposition 1 The charge inside some closed surface S can be calculated by only looking at the field sitting on its surface7: \n\\text{Flux} \\propto Q_{\\text{in}},\n where the flux \\Phi is defined: \n\\Phi := \\oiint_S \\mathbf{E} \\cdot \\mathrm{d} \\boldsymbol{A}.\n\n7¬†This claim directly comes from the inverse square law and superposition principle of fields.\n\nSolution 1. \n\nWe will consider the case then there is only one point charge q inside S.\nConsider a sphere R of radius r around q in Figure¬†1, it‚Äôs obviously that the flux through R does not related to r, because the surface area increases at the rate of r^2 and the field decays at the rate of 1/r^2. Just to be intimidating, \n\\Phi_R = \\oiint_R k \\frac{q}{r^2} dA = k \\frac{q}{r^2} \\cdot 4 \\pi r^2 = 4 \\pi k q \\propto q.\n\nWe commonly let \n\\boxed{\n     k = \\frac{1}{4 \\pi \\epsilon_0}\n}\n  \\tag{4} to simpify8 Equation¬†4 to be \n\\Phi_R = \\frac{q}{\\epsilon_0}.\n\n\n8¬†We introduce the symbol \\epsilon_0 by the motivation to eliminate the ‚Äú4 \\pi‚Äù Equation¬†4. But the meaning of \\epsilon_0 would be clear later until we introduce the electric fields in matter. Don‚Äôt worry.\nNow we claim that \n\\Phi_R = \\Phi_S,\n where S is an arbitrary closed surface outside R.\nAgain we use the inverse square property, the flux through \\mathrm{d}R should be same as the flux through the blue circle in Figure¬†1. Plus, the flux through the blue circle is exactly the same as the flux through \\mathrm{d}S as shown in Figure¬†2 (since their ‚Äúperpendicular‚Äù surface area are the same)\nWe then use superposition property of fields to obtain the equation of multiple charges enclosed.\nSuppose there are N=3 point charges inside S as shown in Figure¬†3, the total flux is\n\n\\Phi\n= \\oiint_S \\mathbf{E} \\cdot  \\mathrm{d} \\mathbf{A}\n= \\sum_{i = 1}^3 \\left(\\oiint_S \\mathbf{E}_i \\cdot  \\mathrm{d} \\mathbf{A}\\right)\n= \\sum_{i = 1}^3 \\frac{q_i}{\\epsilon_0}\n= \\frac{Q_{\\text{in}}}{\\epsilon_0}.\n  \\tag{5}\nOf course Equation¬†5 can be generalized when N is arbitrary. And ura! We have just proof the integral version of Maxwell‚Äôs first equation! \n\\boxed{\n\\oiint_S \\mathbf{E} \\cdot  \\mathrm{d} \\mathbf{A} = \\frac{Q_{\\text{in}}}{\\epsilon_0}.\n}\n  \\tag{6}\nThis is also known as Gauss‚Äôs Law. Equation¬†6 holds for any closed surface S.\n\n\n\n\n\n\n\n\n\n\nFigure¬†1: Single point charge case\n\n\n\n\n\n\n\n\n\nFigure¬†2: The flux through the blue circle is exactly the same as the flux through \\mathrm{d}S\n\n\n\n\n\n\n\n\n\nFigure¬†3: Superposition of the fields of every point charge inside S"
  },
  {
    "objectID": "posts/em1/index.html#differential-form-of-maxwells-first-equation",
    "href": "posts/em1/index.html#differential-form-of-maxwells-first-equation",
    "title": "EM Chapter I: Maxwell‚Äôs First Equation",
    "section": "Differential Form of Maxwell‚Äôs First Equation",
    "text": "Differential Form of Maxwell‚Äôs First Equation\nThe charges in the real world are not commonly appears like an infinitesimal point. They distributed evenly through a body instead of concentrate on a point of no size. Therefore, Q_{\\text{in}} on the RHS9 of Equation¬†6 could be write as an integral: \n\\frac{Q_{\\text{in}}}{\\epsilon_0} = \\iiint_V \\frac{\\rho}{\\epsilon_0} \\mathrm{d}V,\n where V is the region enclosed by S, \\rho is the density10 of charges at some place inside S.\n9¬†Right hand side.10¬†In the case of point charges, this density if infinite. Mathematicians use so-called \\delta-function to describe the behaviour of this kind of ‚Äúdegenerated‚Äù density. It is not a function, just a symbol following some rules that deals with the Mathematical OCD that forces the form of a certain integral unchanged when some mass is concentrated on a small point.\n\n\n\nReal world charges are not point charge\n\n\n\nWhat about the LHS of Equation¬†6? We expect it to be also written in a kind of volume integral to cancel it out with the RHS: \n\\oiint_S \\mathbf{E} \\cdot  \\mathrm{d} \\mathbf{A} = \\iiint_V \\boxed{???} \\mathrm{d}V.\n\nAnd then \n\\iiint_V \\boxed{???} \\mathrm{d}V = \\iiint_V \\frac{\\rho}{\\epsilon_0} \\mathrm{d}V\n\\tag{7} holds for any11 volume V, so we can claim that \n\\boxed{???} = \\frac{\\rho}{\\epsilon_0}.\n\\tag{8}\n11¬†Any is very important! Without any, we cannot derive Equation¬†7 from Equation¬†8.12¬†Also denoted \\mathbf{\\nabla} \\cdot \\mathbf{E}.Luckily! Stoke‚Äôs Theorem tells us \n\\boxed{???} = \\operatorname{div} \\mathbf{E}.\n For those of you not familiar with multivariable calculus, \\operatorname{div} \\mathbf{E} is called the divergence12 of \\mathbf{E}, which is a scalar-valued function purely derived from \\mathbf{E}.\nFinally! We got the differential form: \n\\boxed{\n\\operatorname{div} \\mathbf{E} = \\frac{\\rho}{\\epsilon_0}.\n}\n\\tag{9}"
  },
  {
    "objectID": "posts/em1/index.html#thinking-problem",
    "href": "posts/em1/index.html#thinking-problem",
    "title": "EM Chapter I: Maxwell‚Äôs First Equation",
    "section": "Thinking Problem",
    "text": "Thinking Problem\n\nExercise 1 Think about what properties of \\mathbf{E} ensures that Equation¬†9 holds true?\n\n\nSolution 2. There are only two properties of electric fields that are used to obtain Equation¬†9:\n\nInverse square\nSuperposition\n\nStoke‚Äôs Theorem don‚Äôt count because it holds for any vector fields.\nSuperposition is trivial. The non-trivial part is inverse square. This property ensures that we can extend the sphere to an arbitrary surface in Figure¬†1. What is the nature of inverse square?\nWell, we live in 3-dimensional space. Everything that spreads should somehow decay at the rate of 1/r^2, like light, gravity, sound, etc. Otherwise it will against the conservation of energy. In general, if we live in a N-dim world, fields should naturally decay at the rate of 1/r^{N-1}. In other words, everything in N-dim world should decay at the rate of ‚Äúarea‚Äù decay. This paper by myself delved a little deeper inside this inspiration."
  },
  {
    "objectID": "posts/symmetry/index.html",
    "href": "posts/symmetry/index.html",
    "title": "What is symmetry?",
    "section": "",
    "text": "You may have noticed these concepts:\n\n\n\n\n\n\n\n\nEven/odd complex-valued function\n\n\n\n\nDefinition 1 A function \\(f: \\mathbb{R}^n \\to \\mathbb{C}\\) is called\n\nconjugate symmetric \\(:\\iff f(-\\mathbf{v}) = \\overline{f(\\mathbf{v})}, \\forall \\mathbf{v} \\in \\mathbb{R}^n\\),\nconjugate anti-symmetric \\(:\\iff -f(-\\mathbf{v}) = \\overline{f(\\mathbf{v})}, \\forall \\mathbf{v} \\in \\mathbb{R}^n\\)\n\n\n\n\n\n\n\n\n\n\nSpecial cases of Definition¬†1\n\n\n\n\n\n\n\n\n\nEven/odd real function\n\n\n\n\nDefinition 2 A function \\(f: \\mathbb{R} \\to \\mathbb{R}\\) is called\n\neven \\(:\\iff f(-x) = f(x), \\forall x \\in \\mathbb{R}\\),\nodd \\(:\\iff -f(-x) = f(x), \\forall x \\in \\mathbb{R}\\)\n\n\n\n\n\n\n\n\n\n\nEven/odd multivariate real function\n\n\n\n\nDefinition 3 A function \\(f: \\mathbb{R}^n \\to \\mathbb{R}\\) is called\n\neven \\(:\\iff f(-\\mathbf{v}) = f(\\mathbf{v}), \\forall \\mathbf{v} \\in \\mathbb{R}^n\\),\nodd \\(:\\iff -f(-\\mathbf{v}) = f(\\mathbf{v}), \\forall \\mathbf{v} \\in \\mathbb{R}^n\\)\n\n\n\n\n\n\n\n\n\n\n\n\nDecomposition Property\n\n\n\n\nTheorem 1 Any function \\(f: \\mathbb{R}^n \\to \\mathbb{C}\\) can be decomposed1 into a symmetric part \\(Sf\\) and a anti-symmetric part \\(Af\\): \\[\nf = \\frac{Sf + Af}{2},\n\\] \\[\nSf := f(\\mathbf{v})+\\overline{f(-\\mathbf{v})},\n\\] \\[\nAf := f(\\mathbf{v})-\\overline{f(-\\mathbf{v})}.\n\\]\nIn fancier language, \\[\n\\mathbb{C}^{\\mathbb{R}^n} = S\\mathbb{C}^{\\mathbb{R}^n} \\oplus A\\mathbb{C}^{\\mathbb{R}^n}.\n\\]\n\n\n\n1¬†The reason why I do NOT define \\(Sf = (f(\\mathbf{v})+\\overline{f(-\\mathbf{v})})/2\\) will be clear later.\n\n\n\n\n\nNote\n\n\n\nAs a special case of Theorem¬†1, any function \\(f: \\mathbb{R} \\to \\mathbb{R}\\) is a sum of an even and an odd function: \\[\nf = \\frac{(f(x) + f(-x))+(f(x) - f(-x))}{2}.\n\\]\n\n\n\n\n\nThere are also multiplicative version of Definition¬†1 and Theorem¬†1:\n\n\n\n\n\n\nMultiplicative version of Definition¬†1\n\n\n\n\nDefinition 4 A function \\(f: (\\mathbb{R}^{\\times})^n \\to \\mathbb{C}\\) is called2\n\nMultiplicative conjugate symmetric \\(:\\iff f(\\frac{1}{\\mathbf{v}}) = \\overline{f(\\mathbf{v})}, \\forall \\mathbf{v} \\in \\mathbb{R}^n\\),\nconjugate anti-symmetric \\(:\\iff \\frac{1}{f(\\frac{1}{\\mathbf{v}})} = \\overline{f(\\mathbf{v})}, \\forall \\mathbf{v} \\in \\mathbb{R}^n,\\)\n\nwhere \\(\\frac{1}{\\mathbf{v}}\\) is another vector in \\((\\mathbb{R}^{\\times})^n\\) whose components are the reciprocal of those of \\(\\mathbf{v}\\).\n\n\n\n2¬†\\(\\mathbb{R}^{\\times} := \\mathbb{R} \\backslash \\{0\\}\\).\n\n\n\n\n\nMultiplicative version of Decomposition Property\n\n\n\n\nTheorem 2 Any function \\(f: (\\mathbb{R}^{\\times})^n \\to \\mathbb{C}\\) can be decomposed into a symmetric part \\(S^{\\bullet}f\\) and a anti-symmetric part \\(A^{\\bullet}f\\): \\[\nf = \\sqrt{S^{\\bullet}f \\cdot A^{\\bullet}f},\n\\] \\[\nS^{\\bullet}f := f(\\mathbf{v}) \\cdot \\overline{f(\\mathbf{v}^{-1})},\n\\] \\[\nA^{\\bullet}f := \\frac{f(\\mathbf{v})}{\\overline{f(\\mathbf{v}^{-1})}}.\n\\]\n\n\n\n\n\n\n\n\n\n\n\n\nSymmetric/Alternating Tensor\n\n\n\n\nDefinition 5 A symmetric rank-\\(k\\) tensor \\(f: V^k \\to \\mathbb{R}\\) is symmetric iff \\[\nf(v_{\\sigma(1)}, \\dots, v_{\\sigma(k)}) = f(v_1, \\dots, v_k)\n\\] for all permutations \\(\\sigma \\in S_k\\).\nIt is alternating iff \\[\nf(v_{\\sigma(1)}, \\dots, v_{\\sigma(k)}) = (\\operatorname{sgn} \\sigma) f(v_1, \\dots, v_k)\n\\] for all permutations \\(\\sigma \\in S_k\\).\n\n\n\nThough generally we cannot decompose an arbitrary tensor into a symmetric and alternating part, we could build them by introducing two operators:\n\n\n\n\n\n\nSymmetric/Alternating Operator for Tensors\n\n\n\n\nDefinition 6 Given \\(\\forall f: V^k \\to \\mathbb{R}\\), the operator \\(S\\) and \\(A\\) defined below always give a symmetric and alternating tensor3: \\[\nSf := \\sum_{\\sigma \\in S_k} \\sigma f,\n\\] \\[\nAf := \\sum_{\\sigma \\in S_k} \\operatorname{sgn}(\\sigma) \\sigma f.\n\\]\n\n\n\n3¬†\\(\\sigma f\\) is defined by \\((\\sigma f)(v_1, v_2, \\ldots, v_k) := f(v_{\\sigma(1)}, v_{\\sigma(2)}, \\ldots, v_{\\sigma(k)}).\\)\n\n\n\n\n\n\n\n\nSelf-adjoint and Skew-adjoint Matrices\n\n\n\n\nDefinition 7 A linear operator \\(\\phi \\in \\operatorname{Hom}(V)\\) is called self-adjoint iff \\[\n\\phi^H = \\phi,\n\\] and skew-adjoint iff \\[\n\\phi^H = -\\phi.\n\\]"
  },
  {
    "objectID": "posts/symmetry/index.html#sec-sec1",
    "href": "posts/symmetry/index.html#sec-sec1",
    "title": "What is symmetry?",
    "section": "",
    "text": "You may have noticed these concepts:\n\n\n\n\n\n\n\n\nEven/odd complex-valued function\n\n\n\n\nDefinition 1 A function \\(f: \\mathbb{R}^n \\to \\mathbb{C}\\) is called\n\nconjugate symmetric \\(:\\iff f(-\\mathbf{v}) = \\overline{f(\\mathbf{v})}, \\forall \\mathbf{v} \\in \\mathbb{R}^n\\),\nconjugate anti-symmetric \\(:\\iff -f(-\\mathbf{v}) = \\overline{f(\\mathbf{v})}, \\forall \\mathbf{v} \\in \\mathbb{R}^n\\)\n\n\n\n\n\n\n\n\n\n\nSpecial cases of Definition¬†1\n\n\n\n\n\n\n\n\n\nEven/odd real function\n\n\n\n\nDefinition 2 A function \\(f: \\mathbb{R} \\to \\mathbb{R}\\) is called\n\neven \\(:\\iff f(-x) = f(x), \\forall x \\in \\mathbb{R}\\),\nodd \\(:\\iff -f(-x) = f(x), \\forall x \\in \\mathbb{R}\\)\n\n\n\n\n\n\n\n\n\n\nEven/odd multivariate real function\n\n\n\n\nDefinition 3 A function \\(f: \\mathbb{R}^n \\to \\mathbb{R}\\) is called\n\neven \\(:\\iff f(-\\mathbf{v}) = f(\\mathbf{v}), \\forall \\mathbf{v} \\in \\mathbb{R}^n\\),\nodd \\(:\\iff -f(-\\mathbf{v}) = f(\\mathbf{v}), \\forall \\mathbf{v} \\in \\mathbb{R}^n\\)\n\n\n\n\n\n\n\n\n\n\n\n\nDecomposition Property\n\n\n\n\nTheorem 1 Any function \\(f: \\mathbb{R}^n \\to \\mathbb{C}\\) can be decomposed1 into a symmetric part \\(Sf\\) and a anti-symmetric part \\(Af\\): \\[\nf = \\frac{Sf + Af}{2},\n\\] \\[\nSf := f(\\mathbf{v})+\\overline{f(-\\mathbf{v})},\n\\] \\[\nAf := f(\\mathbf{v})-\\overline{f(-\\mathbf{v})}.\n\\]\nIn fancier language, \\[\n\\mathbb{C}^{\\mathbb{R}^n} = S\\mathbb{C}^{\\mathbb{R}^n} \\oplus A\\mathbb{C}^{\\mathbb{R}^n}.\n\\]\n\n\n\n1¬†The reason why I do NOT define \\(Sf = (f(\\mathbf{v})+\\overline{f(-\\mathbf{v})})/2\\) will be clear later.\n\n\n\n\n\nNote\n\n\n\nAs a special case of Theorem¬†1, any function \\(f: \\mathbb{R} \\to \\mathbb{R}\\) is a sum of an even and an odd function: \\[\nf = \\frac{(f(x) + f(-x))+(f(x) - f(-x))}{2}.\n\\]\n\n\n\n\n\nThere are also multiplicative version of Definition¬†1 and Theorem¬†1:\n\n\n\n\n\n\nMultiplicative version of Definition¬†1\n\n\n\n\nDefinition 4 A function \\(f: (\\mathbb{R}^{\\times})^n \\to \\mathbb{C}\\) is called2\n\nMultiplicative conjugate symmetric \\(:\\iff f(\\frac{1}{\\mathbf{v}}) = \\overline{f(\\mathbf{v})}, \\forall \\mathbf{v} \\in \\mathbb{R}^n\\),\nconjugate anti-symmetric \\(:\\iff \\frac{1}{f(\\frac{1}{\\mathbf{v}})} = \\overline{f(\\mathbf{v})}, \\forall \\mathbf{v} \\in \\mathbb{R}^n,\\)\n\nwhere \\(\\frac{1}{\\mathbf{v}}\\) is another vector in \\((\\mathbb{R}^{\\times})^n\\) whose components are the reciprocal of those of \\(\\mathbf{v}\\).\n\n\n\n2¬†\\(\\mathbb{R}^{\\times} := \\mathbb{R} \\backslash \\{0\\}\\).\n\n\n\n\n\nMultiplicative version of Decomposition Property\n\n\n\n\nTheorem 2 Any function \\(f: (\\mathbb{R}^{\\times})^n \\to \\mathbb{C}\\) can be decomposed into a symmetric part \\(S^{\\bullet}f\\) and a anti-symmetric part \\(A^{\\bullet}f\\): \\[\nf = \\sqrt{S^{\\bullet}f \\cdot A^{\\bullet}f},\n\\] \\[\nS^{\\bullet}f := f(\\mathbf{v}) \\cdot \\overline{f(\\mathbf{v}^{-1})},\n\\] \\[\nA^{\\bullet}f := \\frac{f(\\mathbf{v})}{\\overline{f(\\mathbf{v}^{-1})}}.\n\\]\n\n\n\n\n\n\n\n\n\n\n\n\nSymmetric/Alternating Tensor\n\n\n\n\nDefinition 5 A symmetric rank-\\(k\\) tensor \\(f: V^k \\to \\mathbb{R}\\) is symmetric iff \\[\nf(v_{\\sigma(1)}, \\dots, v_{\\sigma(k)}) = f(v_1, \\dots, v_k)\n\\] for all permutations \\(\\sigma \\in S_k\\).\nIt is alternating iff \\[\nf(v_{\\sigma(1)}, \\dots, v_{\\sigma(k)}) = (\\operatorname{sgn} \\sigma) f(v_1, \\dots, v_k)\n\\] for all permutations \\(\\sigma \\in S_k\\).\n\n\n\nThough generally we cannot decompose an arbitrary tensor into a symmetric and alternating part, we could build them by introducing two operators:\n\n\n\n\n\n\nSymmetric/Alternating Operator for Tensors\n\n\n\n\nDefinition 6 Given \\(\\forall f: V^k \\to \\mathbb{R}\\), the operator \\(S\\) and \\(A\\) defined below always give a symmetric and alternating tensor3: \\[\nSf := \\sum_{\\sigma \\in S_k} \\sigma f,\n\\] \\[\nAf := \\sum_{\\sigma \\in S_k} \\operatorname{sgn}(\\sigma) \\sigma f.\n\\]\n\n\n\n3¬†\\(\\sigma f\\) is defined by \\((\\sigma f)(v_1, v_2, \\ldots, v_k) := f(v_{\\sigma(1)}, v_{\\sigma(2)}, \\ldots, v_{\\sigma(k)}).\\)\n\n\n\n\n\n\n\n\nSelf-adjoint and Skew-adjoint Matrices\n\n\n\n\nDefinition 7 A linear operator \\(\\phi \\in \\operatorname{Hom}(V)\\) is called self-adjoint iff \\[\n\\phi^H = \\phi,\n\\] and skew-adjoint iff \\[\n\\phi^H = -\\phi.\n\\]"
  },
  {
    "objectID": "posts/symmetry/index.html#symmetry-as-group-action",
    "href": "posts/symmetry/index.html#symmetry-as-group-action",
    "title": "What is symmetry?",
    "section": "Symmetry as Group Action",
    "text": "Symmetry as Group Action\n\nProblem\nIs there any way to unify these seemingly ‚Äúsymmetric‚Äù concepts? What kind of mathematical object can be symmetrize and and alternate? When does the object itself expressible by only its symmetrized and and alternated ones?\n\n\nImportant Observation\nThe common thing of the above examples in Section¬†1 is that the domain of the objects (functions, tensors, matrices4) could be manipulated by some kind of actions:\n4¬†This is left as an exercise.\n\\(f: \\mathbb{R}^n \\to \\mathbb{C}\\): additive inversion,\n\\(f: (\\mathbb{R}^{\\times})^n \\to \\mathbb{C}\\): multiplicative inversion,\n\\(f: V^k \\to \\mathbb{R}\\): permutation.\n\nThe first two can be viewed as the 2-element group \\(S_2\\) acts on the domain of \\(f\\), where \\(S_2\\) is the group generated by the operation of ‚Äútaking inverse‚Äù: \\[\nS_2 := \\langle\\cdot^{-1}\\rangle = \\{e, \\cdot^{-1}\\},\n\\] or equivalently, the permutation group on two letters: \\[\nS_2 = \\{e, (12)\\}.\n\\]\nTherefore, in the first two cases, we could define a \\(S_2\\)-action: \\[\n(\\sigma f)(\\mathbf{v}) := \\overline{f(\\mathbf{v}^{-1})},\n\\] where \\(\\mathbf{v}^{-1}\\) is either \\(-\\mathbf{v}\\) (additive inverse) or \\(1/\\mathbf{v}\\) (multiplicative inverse).\nTherefore, the definition of the operator \\(S\\) and \\(A\\) in Definition¬†6 also applies for the first two cases: \\[\nSf\n:= \\sum_{\\sigma \\in S_2} \\sigma f\n= f(\\mathbf{v}) + \\overline{f(-\\mathbf{v})} \\quad (\\text{or } f(\\mathbf{v})\\cdot \\overline{f(-\\mathbf{v})}),\n\\] \\[\nAf\n:= \\sum_{\\sigma \\in S_k} \\operatorname{sgn}(\\sigma) \\sigma f\n= f(\\mathbf{v}) - \\overline{f(-\\mathbf{v})} \\quad (\\text{or } \\frac{f(\\mathbf{v})}{\\overline{f(\\mathbf{v}^{-1})}}).\n\\]\n\n\nWhen Decomposable?\nIn the first two cases, \\(f\\) can be expressed purely by \\(Sf\\) and \\(Af\\): \\[\nf = \\frac{Sf + Af}{2} \\quad (\\text{or } \\sqrt{Sf \\cdot Af}),\n\\] which is just the average of them! (Arithmetic average and geometric average respectively)\nBut we don‚Äôt have this relationship for tensors, i.e., not every rank \\(k\\) tensor can be purely expressed using \\(Sf\\) and \\(Af\\) ‚Äì apart from the case when \\(k = 2\\): \\[\nf(v_1, v_2) = \\frac{(f(v_1, v_2)+f(v_2, v_1))+(f(v_1, v_2)-f(v_2, v_1))}{2} = \\frac{Sf + Af}{2}.\n\\]\nWhat happened when \\(k \\ge 3\\)?\nLet \\(f: V^3 \\to \\mathbb{R}\\), we have \\[\nSf = f(v_1, v_2, v_3) + f(v_2, v_3, v_1) + f(v_3, v_1, v_2) + f(v_2, v_1, v_3) + f(v_1, v_3, v_2) + f(v_3, v_2, v_1),\n\\] \\[\nAf = f(v_1, v_2, v_3) + f(v_2, v_3, v_1) + f(v_3, v_1, v_2) - f(v_2, v_1, v_3) - f(v_1, v_3, v_2) - f(v_3, v_2, v_1).\n\\]\n\n\n\nVisualize group action\n\n\nThe result \\[\n\\frac{Sf + Af}{2} = f(v_1, v_2, v_3) + f(v_2, v_3, v_1) + f(v_3, v_1, v_2) = \\sum_{\\sigma \\in A_3} \\sigma f \\neq f,\n\\] where \\(A_3\\) is the alternating group (the group of even permutations) on three letters.\n\n\nTry Yourself!\n\nExercise 1 (\\(S\\) and \\(A\\) operator for matrices \\(\\phi\\)) Let \\(\\phi \\in \\operatorname{Hom} (\\mathbb{C}^{n \\times n})\\), derive the definition of \\(S\\phi\\) and \\(A \\phi\\).\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\\[\nS \\phi := \\frac{\\phi + \\phi^H}{2},\n\\] \\[\nA \\phi := \\frac{\\phi - \\phi^H}{2}.\n\\]\nWe also have \\[\n\\phi = \\frac{S \\phi + A \\phi}{2}.\n\\]"
  },
  {
    "objectID": "posts/vector-derivation-relation/index.html",
    "href": "posts/vector-derivation-relation/index.html",
    "title": "Q&A: Basis vectors are exactly the same as partial derivative operator?",
    "section": "",
    "text": "In differential geometry, we usually see a vector \\(v\\) is written as: \\[\nv = v^i \\frac{\\partial }{\\partial x^i} \\bigg\\rvert_p.\n\\]\nWhy does a vector naturally relates to partial derivatives?\n\n\n\n\n\n\n\nOne-line Solution\n\n\n\n\n\n\\[\nT_p (\\mathbb{R}^n) \\cong \\text{Der}_p (C^\\infty(\\mathbb{R}^n))\n\\]"
  },
  {
    "objectID": "posts/vector-derivation-relation/index.html#question",
    "href": "posts/vector-derivation-relation/index.html#question",
    "title": "Q&A: Basis vectors are exactly the same as partial derivative operator?",
    "section": "",
    "text": "In differential geometry, we usually see a vector \\(v\\) is written as: \\[\nv = v^i \\frac{\\partial }{\\partial x^i} \\bigg\\rvert_p.\n\\]\nWhy does a vector naturally relates to partial derivatives?\n\n\n\n\n\n\n\nOne-line Solution\n\n\n\n\n\n\\[\nT_p (\\mathbb{R}^n) \\cong \\text{Der}_p (C^\\infty(\\mathbb{R}^n))\n\\]"
  },
  {
    "objectID": "posts/vector-derivation-relation/index.html#solution-from-derivative-to-derivation",
    "href": "posts/vector-derivation-relation/index.html#solution-from-derivative-to-derivation",
    "title": "Q&A: Basis vectors are exactly the same as partial derivative operator?",
    "section": "Solution ‚Äì From Derivative to Derivation",
    "text": "Solution ‚Äì From Derivative to Derivation\n\nDirectional derivative\nWe know from multivariable calculus that in high dimensions, we could not say the ‚Äúderivative‚Äù, but the directional derivative of a function1. The directional derivative is a measure of how quickly the function value vary when we step a tiny nudge along a vector \\(v\\). Imagine we are at \\(p\\) in \\(\\mathbb{R}^3\\) and temperature is different everywhere. We are curiously about how this temperature field \\(f\\) changes in different directions. we move a tiny proportion2 along \\(v\\) (say \\(\\epsilon = 0.01 \\%\\)) and we feel the temperature changes by \\(\\Delta f = f(p+\\epsilon v)-f(p)\\). So we define the directional derivative of \\(f\\) along \\(v\\) is \\[\nD_{v} f |_p := \\lim_{\\epsilon \\to 0} \\frac{\\Delta f}{\\epsilon}.\n\\]\n1¬†‚ÄúScalar field‚Äù in fancier term. A scalar field in \\(\\mathbb{R}^n\\) is a map from \\(\\mathbb{R}^n\\) to \\(\\mathbb{R}\\).2¬†This is important! We are NOT moving a tiny bit but a tiny proportion, which means the length of \\(v\\) matters. Because if we move \\(0.01 \\%\\) on \\(v\\) and \\(2 v\\), \\(f\\) will vary \\(\\Delta f\\) and \\(2\\Delta f\\) and therefore the directional derivative of \\(f\\) along \\(2v\\) would be doubled! In some books, you will see we force \\(v\\) to be unit length, so we will not have this problem. But for me it‚Äôs unnecessary.3¬†We use upper indices to represent coordinate components and lower indices to represent basis vectors, so Equation¬†1 in usually notation is just \\[\nD_v f = \\langle \\frac{\\partial f}{\\partial x} \\hat{\\imath} + \\frac{\\partial f}{\\partial y} \\hat{\\jmath} +\\frac{\\partial f}{\\partial z} \\hat{k}, v_1 \\hat{\\imath} + v_2 \\hat{\\jmath} + v_3 \\hat{k} \\rangle.\n\\]It turns out that there is an explicit formula for directional derivatives: \\[\nD_{v} f = \\langle\\nabla f, v\\rangle,\n\\] i.e., the inner product between the gradient of \\(f\\) and \\(v\\). The direction of the \\(\\nabla f\\) is the steepest ascend of \\(f\\) at \\(p\\). In \\(\\mathbb{R}^3\\), this can be written as3 \\[\n\\begin{aligned}\n    D_v f &= \\langle \\frac{\\partial f}{\\partial x^1} e_1 + \\frac{\\partial f}{\\partial x^2} e_2 +\\frac{\\partial f}{\\partial x^3} e_3, v^1 e_1 + v^2 e_2 + v^3 e_3 \\rangle \\\\\n    &= v^1 \\frac{\\partial f}{\\partial x^1} + v^2 \\frac{\\partial f}{\\partial x^2} + v^3 \\frac{\\partial f}{\\partial x^3} \\\\\n    &= \\sum_i v^i \\frac{\\partial f}{\\partial x^i} \\\\\n    &=: v^i \\frac{\\partial f}{\\partial x^i}.\n\\end{aligned}\n\\tag{1}\\]\nThe last step in Equation¬†1 where we drop the summation notation is a convention called Einstein notation.\nWe could view \\(D_v f\\) as \\(v\\) acts on \\(f\\). Some textbook uses \\(v[f]\\) to represent this action, i.e., \\[\nv[f] := D_v f.\n\\]\n\n\nDerivation\nWe know a normal derivative satisfy so-called chain rule: \\[\n\\frac{\\mathrm{d}}{\\mathrm{d}x}(fg) = \\frac{\\mathrm{d}f}{\\mathrm{d}x} g + f \\frac{\\mathrm{d}g}{\\mathrm{d}x}.\n\\]\nWe extract this property and define abstractly the derivation operator on an algebra as follows:\n\n\n\n\n\n\n\nDerivation on an Algebra\n\n\n\n\nDefinition 1 Let \\(A\\) be an algebra over field \\(\\mathbb{F}\\), a derivation is a linear map \\(D: A \\to A\\) s.t., \\[\nD(ab) = D(a)b + aD(b).\n\\]\n\n\n\n\nIt‚Äôs obvious that every \\(v\\) induces such a derivation on the algebra \\(C^\\infty_p\\) by a map \\(\\phi: v \\mapsto D_v\\). The question is: Does every derivation necessarily induced by a vector?\n\n\n\n\n\n\n\nVectors are Derivations\n\n\n\n\nTheorem 1 The space of all vectors emanating at \\(p\\) is isomorphic to the space of all derivations \\[\nT_p (\\mathbb{R}^n) \\cong \\text{Der}_p (C^\\infty(\\mathbb{R}^n)).\n\\]\n\n\n\n\nIn other words, every possible derivations on the algebra \\(C^\\infty(\\mathbb{R}^n)\\) is some directional derivative along \\(v \\in T_p (\\mathbb{R}^n)\\). Under this isomorphism, the basis vectors \\(e_i\\) is mapped to the partial derivative operator \\(\\frac{\\partial }{\\partial x^i}\\)!\nIn a general manifold \\(M\\), the concept of derivations remain while vectors is hard to define. So we will actually use derivations to define tangent vector in a manifold4:\n\n4¬†Tu‚Äôs book is a very good book of differential geometry for beginners, check it out!\n\n\n\n\n\nTangent Vector in a manifold\n\n\n\n\nDefinition 2 A tangent vector at a point \\(p\\) in a manifold \\(M\\) is a derivation at \\(p\\)."
  },
  {
    "objectID": "posts/create-first-web/index.html",
    "href": "posts/create-first-web/index.html",
    "title": "Create your own website using Hugo on MacOS",
    "section": "",
    "text": "Building a generic website from scratch is a tough work. However, personal websites for blogs, a special type of website, is actually programmatic. Hugo provides a convenient building templates for that. To make a new blog in Hugo, one could only just create a new folder, write a markdown file (in a specific format) and that‚Äôs it. You don‚Äôt need ANY knowledge about HTML or CSS. Well do you need to buy a domain name for everyone to see your posts? Well, GitHub Pages is a free service where you just push some contents in a repository of your own with some extremely easy command line, you created your sites of names like yourname.github.io."
  },
  {
    "objectID": "posts/create-first-web/index.html#introduction-and-overview",
    "href": "posts/create-first-web/index.html#introduction-and-overview",
    "title": "Create your own website using Hugo on MacOS",
    "section": "",
    "text": "Building a generic website from scratch is a tough work. However, personal websites for blogs, a special type of website, is actually programmatic. Hugo provides a convenient building templates for that. To make a new blog in Hugo, one could only just create a new folder, write a markdown file (in a specific format) and that‚Äôs it. You don‚Äôt need ANY knowledge about HTML or CSS. Well do you need to buy a domain name for everyone to see your posts? Well, GitHub Pages is a free service where you just push some contents in a repository of your own with some extremely easy command line, you created your sites of names like yourname.github.io."
  },
  {
    "objectID": "posts/create-first-web/index.html#tools-needed",
    "href": "posts/create-first-web/index.html#tools-needed",
    "title": "Create your own website using Hugo on MacOS",
    "section": "Tools needed",
    "text": "Tools needed\n\nHomebrew (Packet Manager)\nWe will use a packet manager called Homebrew to install Hugo. Follow the commands here to download Homebrew first, or you can execute:\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nOnce downloaded, if you don‚Äôt get any error by entering this in the terminal in any folder, you installed it properly (Install testing):\nbrew --version\n\n\nGit (Version Control System)\nYou can use Homebrew to install Git:\nbrew install git\ngit --version # install testing"
  },
  {
    "objectID": "posts/create-first-web/index.html#install-hugo",
    "href": "posts/create-first-web/index.html#install-hugo",
    "title": "Create your own website using Hugo on MacOS",
    "section": "Install Hugo",
    "text": "Install Hugo\nRun this in any folder:\nbrew install hugo\nInstall testing:\nhugo version"
  },
  {
    "objectID": "posts/create-first-web/index.html#run-example-theme",
    "href": "posts/create-first-web/index.html#run-example-theme",
    "title": "Create your own website using Hugo on MacOS",
    "section": "Run Example Theme",
    "text": "Run Example Theme\n\nCreate Framework\nEnter the terminal in any folder, you will be creating another main folder called mysite in it. Folder mysite will contain all the contents that are relevant to your website:\nhugo new site mysite\ncd mysite\nFolder mysite should look like this:\n\n\n\nInside mysite folder\n\n\nwith most folders in it empty. This is the framework.\n\n\nChoose Theme\nThe themes folder is empty, now we will add some code representing a theme inside it. Now choose a template here and downlaod its source code folder inside the themes folder. I use Stack\ncd themes/\ngit clone https://github.com/CaiJimmy/hugo-theme-stack.git # Replace as needed\n\n\nRun Theme\nNow there should be a folder inside themes. Now copy all the things inside a folder like exampleSite into the main mysite folder (‚Äò‚Äôreplace‚Äô‚Äô).\n\n\n\nCopy the contents in exampleSite into mysite\n\n\nGo to the main mysite folder and remove the original hugo.tomal file, or you can do:\npwd # should be in \"mysite\"\nrm hugo.tomal\nThen (in mysite folder), run:\nhugo server -D\nit will prompt something like:\nBuilt in 865 ms\nEnvironment: \"development\"\nServing pages from disk\nRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender\nWeb Server is available at http://localhost:53844/ (bind address 127.0.0.1) \nPress Ctrl+C to stop\nEnter the link provided (http://localhost:53844/). You are done!"
  },
  {
    "objectID": "posts/create-first-web/index.html#play-around",
    "href": "posts/create-first-web/index.html#play-around",
    "title": "Create your own website using Hugo on MacOS",
    "section": "Play Around",
    "text": "Play Around\nThis is easy, just compare the contents in each folder and the website and modify things a little."
  },
  {
    "objectID": "posts/create-first-web/index.html#publish-your-website",
    "href": "posts/create-first-web/index.html#publish-your-website",
    "title": "Create your own website using Hugo on MacOS",
    "section": "Publish your website",
    "text": "Publish your website\nNote the link (http://localhost:53844/) is private and cannot be visited on other devices. So follow these steps to publish it:\n\nCreate GitHub Repository\nGo to your GitHub page and click ‚Äò+‚Äô on the right upper corner, choose New repository and name it like this:\n\n\n\nName of your repository\n\n\ni.e., yourname.github.io, which will be your own domain name.\n\n\nPush Contents\nRun this:\nhugo --theme=hugo-theme-stack --baseURL=\"https://yourname.github.io/\" --buildDrafts\nThen push the contents in your folder public on it by:\ncd public\ngit init\ngit remote add origin https://github.com/yourname/yourname.github.io.git # change as needed\ngit add .\ngit commit -m \"Initial commit\"\ngit push -u origin main\nYou can access your website on https://yourname.github.io/ within several minutes.\n\n\nNotes\nAfter you change contents locally, the contents on https://yourname.github.io/ will not change automatically, you will have to push it on GitHub again:\ncd public\ngit add .\ngit commit -m \"Add something new\"\ngit push origin main\nAlso the public website will not update instantly, you will have to wait several minutes."
  },
  {
    "objectID": "posts/java-to-launchpad/index.html",
    "href": "posts/java-to-launchpad/index.html",
    "title": "javaÈ°πÁõÆÂØºÂÖ•LaunchpadÊñπÊ°à MacOS",
    "section": "",
    "text": "ÊàëÊÉ≥Âú®launchpad‰∏äÈù¢ÂêØÂä®‰∏Ä‰∏™ java È°πÁõÆÔºå‰ΩÜÊòØapplicationÂè™ÊîØÊåÅÂêØÂä® .app Êñá‰ª∂ÔºåÊÄé‰πàÂäûÔºü"
  },
  {
    "objectID": "posts/java-to-launchpad/index.html#intro",
    "href": "posts/java-to-launchpad/index.html#intro",
    "title": "javaÈ°πÁõÆÂØºÂÖ•LaunchpadÊñπÊ°à MacOS",
    "section": "",
    "text": "ÊàëÊÉ≥Âú®launchpad‰∏äÈù¢ÂêØÂä®‰∏Ä‰∏™ java È°πÁõÆÔºå‰ΩÜÊòØapplicationÂè™ÊîØÊåÅÂêØÂä® .app Êñá‰ª∂ÔºåÊÄé‰πàÂäûÔºü"
  },
  {
    "objectID": "posts/java-to-launchpad/index.html#Ëß£ÂÜ≥ÊñπÊ°à",
    "href": "posts/java-to-launchpad/index.html#Ëß£ÂÜ≥ÊñπÊ°à",
    "title": "javaÈ°πÁõÆÂØºÂÖ•LaunchpadÊñπÊ°à MacOS",
    "section": "Ëß£ÂÜ≥ÊñπÊ°à",
    "text": "Ëß£ÂÜ≥ÊñπÊ°à\nspotlight ÊêúÁ¥¢ AutomatorÔºåÊâìÂºÄ AutomatorÔºåÊåâ command+W ÂÖ≥Èó≠ÂºπÂá∫ÁöÑÁ™óÂè£Ôºö\n\nÂú®ÂØºËà™Ê†è‰∏≠ÂÜçÊ¨°ÊâìÂºÄ AutomatorÔºåÈÄâÊã© ApplicationÔºö\n\nÊêúÁ¥¢Ê†è‰∏≠ÊêúÁ¥¢ Run AppleScriptÔºåÊãñÊãΩÂà∞Âè≥‰æßÁöÑÁ©∫ÁôΩÂå∫Âüü:\n\nÂä†ÂÖ•‰ª•‰∏ãÂÜÖÂÆπÔºö\non run {input, parameters}\n    set p to POSIX path of (path to me)\n    do shell script \"java -jar \" & p & \"/Contents/Java/YOURJARFILE.jar\"\n \nend run\nËÆ∞ÂæóÊõøÊç¢ YOURJARFILE.jar ‰∏∫‰Ω†ÁöÑ jar Êñá‰ª∂Âêç„ÄÇ‰ΩÜÊòØÊ≠§Êó∂ \"/Contents/Java/ Ëøô‰∏™Ë∑ØÂæÑÊòØ‰∏çÂ≠òÂú®ÁöÑÔºåËÄå‰∏î YOURJARFILE.jar ‰πüÊ≤°ÊúâÂú®Ëøô‰∏™Ë∑ØÂæÑ‰∏ãÔºåÊâÄ‰ª•‰ª•ÂêéÊàë‰ª¨ÈúÄË¶ÅÂàõÂª∫Ëøô‰∏™Ë∑ØÂæÑ„ÄÇ‰ΩÜÊòØÈ¶ñÂÖàÊàë‰ª¨ÂÖà‰øùÂ≠ò(Command+S)Ëøô‰∏™Êñá‰ª∂‰∏∫‰∏Ä‰∏™ .app Êñá‰ª∂ÔºåË∑ØÂæÑ‰∏∫ /ApplicationÔºåÊñá‰ª∂Âêç‰∏∫‰Ω†ÊúüÂæÖËøô‰∏™appÁöÑÂêçÂ≠óÔºåÂ¶ÇÔºöYOURJARFILE.app„ÄÇ\nËøõÂÖ• /Application/YOURJARFILE.appÔºåÂè≥ÈîÆÁÇπÂáª Show Package ContentsÔºåÂú® Contents Êñá‰ª∂Â§π‰∏ãÂàõÂª∫ java Êñá‰ª∂Â§πÔºåÂ∞Ü‰Ω†ÁöÑ YOURJARFILE.jar Êã∑Ë¥ùÊîæÂÖ•Ëøô‰∏™Êñá‰ª∂Â§π„ÄÇ\n\nÁÑ∂Âêé‰Ω†Â∞±ÂèØ‰ª•ÈÄöËøá launchpad .app Êñá‰ª∂ÂêØÂä®‰Ω†ÁöÑ java È°πÁõÆ‰∫Ü„ÄÇ"
  },
  {
    "objectID": "posts/java-to-launchpad/index.html#ÊîπÂõæÊ†á",
    "href": "posts/java-to-launchpad/index.html#ÊîπÂõæÊ†á",
    "title": "javaÈ°πÁõÆÂØºÂÖ•LaunchpadÊñπÊ°à MacOS",
    "section": "ÊîπÂõæÊ†á",
    "text": "ÊîπÂõæÊ†á\nËøòÊòØÂú® Contents Êñá‰ª∂Â§π‰∏ãÔºåÊääËøô‰∏™ .icns Êñá‰ª∂Êç¢Êàê‰Ω†Ëá™Â∑±ÁöÑÂõæÊ†áÊñá‰ª∂ÔºåÊØîÂ¶ÇÂèØ‰ª•Êää png Êñá‰ª∂ËΩ¨Êç¢Êàê icns Êñá‰ª∂ÔºåÁÑ∂ÂêéÊõøÊç¢Ëøô‰∏™Êñá‰ª∂(Êñá‰ª∂Âêç‰∏çÂèò)„ÄÇ\n\nÁÑ∂Âêé Refresh the Icon Cache (if necessary):\ntouch /path/to/YOURJARFILE.app\nkillall Dock\nFinish!"
  },
  {
    "objectID": "posts/java-to-launchpad/index.html#references",
    "href": "posts/java-to-launchpad/index.html#references",
    "title": "javaÈ°πÁõÆÂØºÂÖ•LaunchpadÊñπÊ°à MacOS",
    "section": "References",
    "text": "References\n\nHow to convert .jar to .app on Mac - a Java tutorial\nLaunching a jar file as an app on Mac (from the dock)"
  },
  {
    "objectID": "cv/index.html",
    "href": "cv/index.html",
    "title": "Marcobisky",
    "section": "",
    "text": "Movable Antenna (MA) for Anti-jamming (Just start)\n\nMain tools: matlab.\nA heuristic investigation into Anti-jamming through stochastic antenna movement, conducted under the supervision of Prof.¬†Weidong Mei.\n\nComputer Vision (CV) for Quadrotor Aircraft (Just start)\n\nMain tools: matlab, C/C++, python, verilog.\nA group project (6 people) for programming an automatic quadrotor aircraft for objection detection, robotic arm manipulation, and closed-loop flight control.\n\nRV32I CPU Core for Education  (Jan 2025 ‚Äî Present)\n\n\n\n\n\nGPIO simulation in Digital\n\n\n\nMain tools: verilog, VHDL, Digital, Kicad, iCESuger FPGA.\nSimulate an entire RISC-V 32 bit CPU in verilog and Digital Software.\nSupport basic peripherals such as GPIOs, IIC, UART, VGA, etc.\nSimple boot ROM in assembly, minimal interrupt service for running a Linux kernel.\nComplete PCB design in Kicad (Not finished).\n\nAME Source Coding (Oct 2024 ‚Äî Nov 2024)\n\n\n\n\n\nProposed AME coding scheme\n\n\n\nMain tools: python, matlab.\nFinal project of Information Theory Course.\nDeveloped a method (Second-order Markov Adapative Approximation, AME) to perform source coding for the Game of Thrones. The performance of Huffman and Fano coding was also evaluated.\n\nCNN for Mbed (Feb 2024 ‚Äî May 2024)\n\n\n\n\n\nProposed CNN in L432KC MCU\n\n\n\nMain tools: python, C++.\nIntegrated a Convolutional Neural Network (CNN) into an MCU for smart fall detection for the elderly.\nRealized functions include smart fall detection, body temperature monitoring and real-time data visualization.\n\nA Study of Generalized Fields and Extension to Higher Dimensions1 (Oct 2023 ‚Äî Feb 2024)\n1¬†I submitted this paper to the American Journal of Physics, but it was declined for publication.\n\n\n\nFields in high dimension can be reduced\n\n\n\n\nA theoretical study of generalized natural fields and behaviours in higher dimensions.\nLargely motivated by my tutor Mr.¬†Yidong Liu and my friends and complete by myself.\n\nHuman Voice Recognition Smart Car (Sept 2023 ‚Äî Dec 2023)\n\n\n\n\n\nVoice-controlled car\n\n\n\nMain tools: C++, STM32F103C8T6 MCU, etc.\nLed a team of a group of 4 people.\nBuilt a car with recognition of pre-defined English words to control the movements of a small car. Basic operations include moving forwards and backwards, turning or sliding left and right, etc.\n\nAuto Door Opener for Dormitory (Sept 2023 ‚Äî Oct 2023)\n\n\n\n\n\nDoor opener tested on breadboard\n\n\n\nMain tools: C++, Nucleo L432KC MCU, Mbed library, OLED screen, etc.\nThis was the final project of the Microelectronic System course.\nRealized opening our dormitory door by simply entering password from a keyboard outside the room (instead of using physical keys). Basic functions include setting up password manually, automatically lock if wrong password is entered over 5 times, display messages on an OLED screen, etc.\n\n‚ÄúXinTong Cup‚Äù Electronic Design Competition: Electronic Keyboard Music Player (Sept 2022 ‚Äî Oct 2022)\n\nMain tools: Keil C51, STC89C52RC MCU, etc.\nLed a small team of a group of 3 people.\nSuccessfully built a simplified keyboard music player with 8 keys using an 8-bit MCU by ST company and Keil C51 language for register-based development.\nFunctionality of the keyboard music player consists: Single note playing, chord playing, recording ability, replay and rewind capability, etc."
  },
  {
    "objectID": "cv/index.html#engaged-projects",
    "href": "cv/index.html#engaged-projects",
    "title": "Marcobisky",
    "section": "",
    "text": "Movable Antenna (MA) for Anti-jamming (Just start)\n\nMain tools: matlab.\nA heuristic investigation into Anti-jamming through stochastic antenna movement, conducted under the supervision of Prof.¬†Weidong Mei.\n\nComputer Vision (CV) for Quadrotor Aircraft (Just start)\n\nMain tools: matlab, C/C++, python, verilog.\nA group project (6 people) for programming an automatic quadrotor aircraft for objection detection, robotic arm manipulation, and closed-loop flight control.\n\nRV32I CPU Core for Education  (Jan 2025 ‚Äî Present)\n\n\n\n\n\nGPIO simulation in Digital\n\n\n\nMain tools: verilog, VHDL, Digital, Kicad, iCESuger FPGA.\nSimulate an entire RISC-V 32 bit CPU in verilog and Digital Software.\nSupport basic peripherals such as GPIOs, IIC, UART, VGA, etc.\nSimple boot ROM in assembly, minimal interrupt service for running a Linux kernel.\nComplete PCB design in Kicad (Not finished).\n\nAME Source Coding (Oct 2024 ‚Äî Nov 2024)\n\n\n\n\n\nProposed AME coding scheme\n\n\n\nMain tools: python, matlab.\nFinal project of Information Theory Course.\nDeveloped a method (Second-order Markov Adapative Approximation, AME) to perform source coding for the Game of Thrones. The performance of Huffman and Fano coding was also evaluated.\n\nCNN for Mbed (Feb 2024 ‚Äî May 2024)\n\n\n\n\n\nProposed CNN in L432KC MCU\n\n\n\nMain tools: python, C++.\nIntegrated a Convolutional Neural Network (CNN) into an MCU for smart fall detection for the elderly.\nRealized functions include smart fall detection, body temperature monitoring and real-time data visualization.\n\nA Study of Generalized Fields and Extension to Higher Dimensions1 (Oct 2023 ‚Äî Feb 2024)\n1¬†I submitted this paper to the American Journal of Physics, but it was declined for publication.\n\n\n\nFields in high dimension can be reduced\n\n\n\n\nA theoretical study of generalized natural fields and behaviours in higher dimensions.\nLargely motivated by my tutor Mr.¬†Yidong Liu and my friends and complete by myself.\n\nHuman Voice Recognition Smart Car (Sept 2023 ‚Äî Dec 2023)\n\n\n\n\n\nVoice-controlled car\n\n\n\nMain tools: C++, STM32F103C8T6 MCU, etc.\nLed a team of a group of 4 people.\nBuilt a car with recognition of pre-defined English words to control the movements of a small car. Basic operations include moving forwards and backwards, turning or sliding left and right, etc.\n\nAuto Door Opener for Dormitory (Sept 2023 ‚Äî Oct 2023)\n\n\n\n\n\nDoor opener tested on breadboard\n\n\n\nMain tools: C++, Nucleo L432KC MCU, Mbed library, OLED screen, etc.\nThis was the final project of the Microelectronic System course.\nRealized opening our dormitory door by simply entering password from a keyboard outside the room (instead of using physical keys). Basic functions include setting up password manually, automatically lock if wrong password is entered over 5 times, display messages on an OLED screen, etc.\n\n‚ÄúXinTong Cup‚Äù Electronic Design Competition: Electronic Keyboard Music Player (Sept 2022 ‚Äî Oct 2022)\n\nMain tools: Keil C51, STC89C52RC MCU, etc.\nLed a small team of a group of 3 people.\nSuccessfully built a simplified keyboard music player with 8 keys using an 8-bit MCU by ST company and Keil C51 language for register-based development.\nFunctionality of the keyboard music player consists: Single note playing, chord playing, recording ability, replay and rewind capability, etc."
  },
  {
    "objectID": "cv/index.html#academic-record",
    "href": "cv/index.html#academic-record",
    "title": "Marcobisky",
    "section": "ACADEMIC RECORD",
    "text": "ACADEMIC RECORD\n\nDetailed scores of core courses (GPA: 3.88)\n\n\n\n\n\n\n\nYear\nSubject2\nScore\n\n\n\n\nYear 1\nCalculus I/II   Linear Algebra   C Programming   Physics I  \n91/92   84   95   88  \n\n\nYear 2\nPhysics II   Signal and Systems   Probability and Statistics   Microelectronic Systems   Embedded Processors   Circuit Analysis and Design   Computer Network   Academic English  \n96   91   92   92   95   95   94   89  \n\n\nYear 3\nInformation Theory   Principles of Communication   Digital Circuit Design   Machine Learning   Stochastic Signal Analysis  \n91   95   86   86   82 \n\n\n\n2¬†I‚Äôm relatively confident in my understanding of the Boldface subjects."
  },
  {
    "objectID": "cv/index.html#relevant-skills",
    "href": "cv/index.html#relevant-skills",
    "title": "Marcobisky",
    "section": "RELEVANT SKILLS",
    "text": "RELEVANT SKILLS\n\nIT Skills: Latex, (Quarto) Markdown, Typst, Manim3, Github4, Microsoft Office.\nComputer Programming: C/C++, Matlab, Python.\nEmbedded System Programming: RISCV assembly, STM89C5x (Standard lib), Keil C51.\nMath: Self learned (Abstract Algebra (Harvard E-222)), Point-set Topology, Measure Theory, Complex Analysis (MIT 18.04), Functional Analysis, Elementary Differential Geometry, Smooth Manifolds (still learning). I didn‚Äôt go too deep in each of these subjects, but I understand their motivation and basic ideas behind them so that I will use fewer time learning these.\nTeam Work: Zoom meeting, Notion team, Microsoft team.\nLanguage: No problem in understanding English lectures, native Chinese.\n\n3¬†See here where I use manim to explain the relation between adjoint and dual operator.4¬†My repository."
  },
  {
    "objectID": "cv/index.html#others",
    "href": "cv/index.html#others",
    "title": "Marcobisky",
    "section": "OTHERS",
    "text": "OTHERS\n\nClassical Music Enthusiastüéª: Violin player in UESTC symphony orchestra, votary of legendary composer Gustav Mahler and Johann Sebastian Bach.\nBadminton Loverüè∏: Sports always refreshes me at any time.\nLearn Everythingüîç: I‚Äôm open to think and learn everything exist or non-exist on earth.\nVolunteer Workü§ù: Love helping others, over 15 hours of volunteering."
  }
]
[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TinyML",
    "section": "",
    "text": "0.1 Hi!\nThis is a personal project titled System-Level Co-Design and AI-EDA of RISC-V Accelerators for TinyML at the Edge under my supervisor LIYUN. His PhD student Jintao Li also helps me greatly. This is a place where I record my learning journey into TinyML and RISC-V accelerators – from scratch. So some of the content may be too basic or even technically incorrect, but they are, hopefully, informative and motivation-boosting for you thirsty learners.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Prologue</span>"
    ]
  },
  {
    "objectID": "index.html#update-logs",
    "href": "index.html#update-logs",
    "title": "TinyML",
    "section": "0.2 Update Logs",
    "text": "0.2 Update Logs\n\\[\n\\text{This is a test formula}\n\\]",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>TinyML</span>"
    ]
  },
  {
    "objectID": "env-setup.html",
    "href": "env-setup.html",
    "title": "2  MacOS",
    "section": "",
    "text": "2.1 MacOS 环境配置\n以下是本人在 MacOS 试过的两种失败的方法, 供参考:\n我们利用 Docker 来搭建 CFU Playground 环境, 这样可以避免 MacOS 上的架构问题. 自行安装 Docker, 然后将 scripts/Dockerfile 更改为:\n然后在 CFU-Playground 目录下执行:\n查看镜像:\n逐条执行, 其中 -v $(pwd):/workspace 表示当前目录 (宿主机)挂载到容器的 /workspace 目录中 (数据共享通道).\n这最后一条指令最后会报错:\n即 libusb_init() 函数初始化错误. 事实上不可能通过 Docker 给开发版烧录, MacOS 环境有一个隔离层, GPT 如是说:\n但是可以生成比特流文件, 运行:\n如果要运行已经存在的容器 (例如叫 romantic_austin), 运行:",
    "crumbs": [
      "Environment Setup",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>MacOS</span>"
    ]
  },
  {
    "objectID": "index.html#hi",
    "href": "index.html#hi",
    "title": "TinyML",
    "section": "",
    "text": "Correctness is the enemy of progress. – Myself",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Prologue</span>"
    ]
  },
  {
    "objectID": "index.html#change-logs",
    "href": "index.html#change-logs",
    "title": "TinyML",
    "section": "0.2 Change Logs",
    "text": "0.2 Change Logs\n\n2025-06-29: Initial commit.\n2025-07-06: 尝试在 MacOS 上原生搭建和用 Docker 搭建, 无果, 遂改用 Parallel Desktop 上安装 Ubuntu 24.04.\n2025-07-07: 发现在 M 芯片 MacOS 上无法安装 linux-64 架构, 改用 Docker 搭建环境成功 … 了一半, 最后因为 Docker 无法连接访问 MacOS 连接的 USB 而构建实例工程失败.\n2025-07-08: 喜提新 Thinkbook, 由于显卡和网卡驱动找不到安装 Debian 失败特别狂躁, Tonic 上报复性狂练 3 小时降 E 大调音阶. 后来安装 Ubuntu 24.04 实体机成功编译. btw, Spark 推荐的 AtlasOS 太好用啦, Synergy 同步 Win, Mac, IOS, Linux 剪切板太方便啦 (就是没有安卓hh)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>TinyML</span>"
    ]
  },
  {
    "objectID": "env-setup.html#macos-环境配置",
    "href": "env-setup.html#macos-环境配置",
    "title": "2  MacOS",
    "section": "",
    "text": "MacOS 原生部署 (未成功)\n\n\n\n\n\n官方 Setup Guide 不适用于 MacOS, 本教程可以配合官方教程. 以下是在 14-inch MacBook Pro (M2 pro) 上我执行过的命令, 可能有不必要的步骤. 另外我之前安装过一些工具如 make, brew, openocd 等, 如有漏掉的步骤请用 brew 自行安装.\n\nCFU 环境配置\ngit clone https://github.com/google/CFU-Playground.git\ncd CFU-Playground\n# Check necessary tools\nwhich gcc\nwhich make\nwhich brew\nbrew install openocd ccache verilator ninja libusb libftdi\nwhich expect\n将 scripts/setup 中的 line 58-60 替换为:\n# Check for libusb development libraries\nif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n    # macOS: check for Homebrew libusb\n    if ! brew list libusb &gt;/dev/null 2&gt;&1 || ! brew list libftdi &gt;/dev/null 2&gt;&1; then\n        missing+=(libusb libftdi)\n    fi\nelse\n    # Linux: check for apt packages\n    if ! (apt list -i | grep libusb-1.0-0-dev) ; then\n        missing+=(libusb-1.0-0-dev libftdi1-dev)\n    fi\nfi\n再运行:\n./scripts/setup # Should end up \"Setup complete\"\nAmaranth 能让你用 Python 写硬件描述语言, 我们暂时不安装.\nFPGA 开源工具链 SymbiFlow 配置\nSymbiFlow 是一个开源的 FPGA 工具链, 支持我们用的 Arty A7-35T 开发板. F4PGA (Framework for FPGA) 是它的下一代.\nMacOS 上会遇到以下问题:\n\ndfu-util 包不可用\nflterm 包不可用\nPython 3.7 不支持\n\n执行:\nbrew install dfu-util yosys\n将 conf/environment-symbiflow.yml 中替换为:\nname: cfu-symbiflow\nchannels:\n- defaults\n- conda-forge\ndependencies:\n# Basic Python packages that should be available\n- lxml\n- simplejson\n- intervaltree\n- json-c\n- libevent\n- python=3.9\n- pip\n- pip:\n    - -r ./requirements-symbiflow.txt\n然后运行:\nrm -rf env/symbiflow && make install-sf\n出现以下输出时表示安装成功:\nDone installing SymbiFlow.  To enter the environment, type 'make enter-sf', which creates a new subshell, and 'exit' when done.\n测试环境:\nmake enter-sf\nexit\n以上方法会在执行 zsh  make prog TARGET=digilent_arty USE_SYMBIFLOW=1\n时出现错误, 因为我们删掉了很多 python 依赖. 这些依赖在 litex-hub 源里面没有 osx-arm64 的版本!!!\n\n\n\n\n\n\n\n\n\n\n\n\nMacOS 虚拟机部署 (未成功)\n\n\n\n\n\nCFU playground 里的 environment-symbiflow 里的很多依赖 (比如 dfu-util 和 flterm 等, 可以在 Anaconda 里面搜索你需要的包) 只支持 linux-64 版本, M 芯片的 MacOS 上的 PD 好像只能安装 linux-aarch64 架构的虚拟机.\n\n\n\ngcc-riscv32-elf-newlib 只支持 linux-64\n\n\n在你安装的虚拟机终端执行:\narch\n不能是 aarch64 才行, 需要是 x86_64 才能安装 linux-64 架构的包!!!\n\n\n\n\n\nFROM debian:testing\n\nENV RISCV_DIR=/toolchain/riscv64-unknown-elf-gcc-8.3.0-2020.04.1-x86_64-linux-ubuntu14/bin\nENV PATH=\"/third_party/renode:${RISCV_DIR}:${PATH}\"\nARG WORKDIR=/CFU-Playground\n\nRUN apt update -y && apt install -y wget git python3-pip make gcc openocd yosys expect ccache verilator libevent-dev libjson-c-dev libusb-1.0-0-dev libftdi1-dev vim curl bzip2 && rm -rf /var/lib/apt/lists/*\n\n# Install miniconda\nRUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh && \\\n    bash miniconda.sh -b -p /opt/conda && \\\n    rm miniconda.sh && \\\n    /opt/conda/bin/conda clean -ya\n\nENV PATH=\"/opt/conda/bin:${PATH}\"\n\nRUN mkdir /toolchain && cd /toolchain && wget --progress=dot:giga https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-8.3.0-2020.04.1-x86_64-linux-ubuntu14.tar.gz && tar xf riscv64*tar.gz && rm riscv64*tar.gz\n\nRUN mkdir -p /third_party/renode && wget --progress=dot:giga https://dl.antmicro.com/projects/renode/builds/renode-latest.linux-portable.tar.gz && tar xf renode-*tar.gz -C /third_party/renode --strip-components=1 && rm renode-*tar.gz && python3 -m pip install --break-system-packages -r /third_party/renode/tests/requirements.txt\n\nRUN git clone https://github.com/google/CFU-Playground ${WORKDIR}\nWORKDIR ${WORKDIR}\n\nRUN ./scripts/setup -ci\n\ndocker build -t cfu-playground --platform linux/amd64 ./scripts # Takes around 20 min\n\ndocker images\n\ndocker run -it -v $(pwd):/workspace cfu-playground bash\ncd ../workspace\n./scripts/setup\nmake install-sf # Takes around 9 min\nmake enter-sf\ncd proj/proj_template\nmake clean\nmake prog TARGET=digilent_arty USE_SYMBIFLOW=1\n\nError: libusb_init() failed with LIBUSB_ERROR_OTHER\n\nTraceback (most recent call last):\n  File \"./common_soc.py\", line 57, in &lt;module&gt;\n    main()\n  File \"./common_soc.py\", line 53, in main\n    workflow.run()\n  File \"/CFU-Playground/soc/board_specific_workflows/general.py\", line 127, in run\n    self.load(soc, soc_builder)\n  File \"/CFU-Playground/soc/board_specific_workflows/general.py\", line 116, in load\n    prog.load_bitstream(bitstream_filename)\n  File \"/CFU-Playground/third_party/python/litex/litex/build/openocd.py\", line 27, in load_bitstream\n    self.call([\"openocd\", \"-f\", config, \"-c\", script])\n  File \"/CFU-Playground/third_party/python/litex/litex/build/generic_programmer.py\", line 101, in call\n    raise OSError(msg)\nOSError: Error occured during OpenOCD's call, please check:\n- OpenOCD installation.\n- Access permissions.\n- Hardware and cable.\n- Bitstream presence.\n\n\n\n\n不可能通过 Docker 给开发版烧录\n\n\n\nmake bitstream TARGET=digilent_arty USE_SYMBIFLOW=1\n\ndocker start -ai romantic_austin",
    "crumbs": [
      "Environment Setup",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>MacOS</span>"
    ]
  },
  {
    "objectID": "env-setup.html#ubuntu-24.04-实体机部署",
    "href": "env-setup.html#ubuntu-24.04-实体机部署",
    "title": "2  MacOS",
    "section": "2.2 Ubuntu 24.04 实体机部署",
    "text": "2.2 Ubuntu 24.04 实体机部署\n我们用 Arty A7-100T 开发板.\n直接按照 Setup Guide 执行即可, 一般没问题. 有可能 make install-sf 会报错, 仅仅是网络连接的问题:\nwget -qO- https://storage.googleapis.com/symbiflow-arch-defs/artifacts/prod/foss-fpga-tools/symbiflow-arch-defs/continuous/install/20220729-181657/symbiflow-arch-defs-install-xc7-7833050.tar.xz | tar -xJC env/symbiflow/xc7/install\nxz: (stdin): File format not recognized\ntar: Child returned status 1\ntar: Error is not recoverable: exiting now\nmake: *** [Makefile:58: install-sf] Error 2\n请把科学上网 (如 Clash Verge) 安装上 Service Mode, 然后打开 Tun Mode. 把 Makefile 中 63-65 行的三个 wget 改成:\n    curl -L https://storage.googleapis.com/symbiflow-arch-defs/artifacts/prod/foss-fpga-tools/symbiflow-arch-defs/continuous/install/${F4PGA_TIMESTAMP}/symbiflow-arch-defs-install-xc7-${F4PGA_HASH}.tar.xz | tar -xJ -C $(SF_INSTALL)/xc7/install\n    curl -L https://storage.googleapis.com/symbiflow-arch-defs/artifacts/prod/foss-fpga-tools/symbiflow-arch-defs/continuous/install/${F4PGA_TIMESTAMP}/symbiflow-arch-defs-xc7a50t_test-${F4PGA_HASH}.tar.xz | tar -xJ -C $(SF_INSTALL)/xc7/install\n    curl -L https://storage.googleapis.com/symbiflow-arch-defs/artifacts/prod/foss-fpga-tools/symbiflow-arch-defs/continuous/install/${F4PGA_TIMESTAMP}/symbiflow-arch-defs-xc7a100t_test-${F4PGA_HASH}.tar.xz | tar -xJ -C $(SF_INSTALL)/xc7/install\n即可跑通 make install-sf.\n如果没插入开发板, 运行:\nmake bitstream TARGET=digilent_arty USE_SYMBIFLOW=1\n跑通即可.",
    "crumbs": [
      "Environment Setup",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>MacOS</span>"
    ]
  },
  {
    "objectID": "terms.html",
    "href": "terms.html",
    "title": "5  Terms 名词解释",
    "section": "",
    "text": "多数定义为 GPT 生成.\n\n\nCFU: Custom Function Unit (自定义功能单元). 为 ML 某些耗时的计算 (如卷积、矩阵乘法、位操作等) 定制的指令加速硬件模块.\n\n一旦主处理器执行到特定的 CFU 指令，就会将数据发送给 CFU 处理，然后 CFU 返回结果.\n\nPMOD (Peripheral Module) 接口: 一组 2*6 排针的引脚 PMOD. 定义了电源、地线、以及最多 8 条可用于通信的信号线. PMOD模块通常通过 SPI、I2C 或 GPIO (通用数字输入输出) 与主控通信. 你可以买到很多支持 PMOD 的模块, 如传感器、显示屏、存储器等.\nJTAG 接口: 一种用于调试和编程的标准接口.",
    "crumbs": [
      "Crash Courses",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Terms 名词解释</span>"
    ]
  },
  {
    "objectID": "index.html#change-logs-更新日志",
    "href": "index.html#change-logs-更新日志",
    "title": "TinyML",
    "section": "0.2 Change Logs 更新日志",
    "text": "0.2 Change Logs 更新日志\n\n2025-06-29: Initial commit.\n2025-07-06: 尝试在 MacOS 上原生搭建和用 Docker 搭建, 无果, 遂改用 Parallel Desktop 上安装 Ubuntu 24.04.\n2025-07-07: 发现在 M 芯片 MacOS 上无法安装 linux-64 架构, 改用 Docker 搭建环境成功 … 了一半, 最后因为 Docker 无法连接访问 MacOS 连接的 USB 而构建实例工程失败.\n2025-07-08: 喜提新 Thinkbook, 由于显卡和网卡驱动找不到安装 Debian 失败特别狂躁, Tonic 上报复性狂练 3 小时降 E 大调音阶. 后来安装 Ubuntu 24.04 实体机成功编译. btw, Spark 推荐的 AtlasOS 太好用啦, Synergy 同步 Win, Mac, IOS, Linux 剪切板太方便啦 (就是没有安卓hh)\n2025-07-09: 在 Ubuntu 24.04 上成功构建 CFU-Playground 的 /proj/proj_template 实例工程. 并且发现 MacOS 上也可以成功生成比特流文件.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Prologue</span>"
    ]
  },
  {
    "objectID": "verilog.html",
    "href": "verilog.html",
    "title": "3  Digital Circuit and Verilog 数字电路与 Verilog",
    "section": "",
    "text": "3.1 Logic 逻辑",
    "crumbs": [
      "Crash Courses",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Digital Circuit and Verilog 数字电路与 Verilog</span>"
    ]
  },
  {
    "objectID": "verilog.html#logic-逻辑",
    "href": "verilog.html#logic-逻辑",
    "title": "3  Digital Circuit and Verilog 数字电路与 Verilog",
    "section": "",
    "text": "整个计算机世界可以想象成一堆有输入输出的 block (模块) 连在一起形成的复杂网络. 每个模块都有其自己的实现方法.",
    "crumbs": [
      "Crash Courses",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Digital Circuit and Verilog 数字电路与 Verilog</span>"
    ]
  },
  {
    "objectID": "verilog.html#verilog-语法的电路对应",
    "href": "verilog.html#verilog-语法的电路对应",
    "title": "3  Digital Circuit and Verilog 数字电路与 Verilog",
    "section": "3.2 Verilog 语法的电路对应",
    "text": "3.2 Verilog 语法的电路对应\n\n3.2.1 模块定义",
    "crumbs": [
      "Crash Courses",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Digital Circuit and Verilog 数字电路与 Verilog</span>"
    ]
  }
]